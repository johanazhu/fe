import{_ as t,c as r,o as a,d as e}from"./app.590c1fbf.js";const v=JSON.parse('{"title":"JavaScript 是什么？","description":"","frontmatter":{},"headers":[{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"由什么组成","slug":"由什么组成","link":"#由什么组成","children":[]},{"level":2,"title":"ECMAScript 版本","slug":"ecmascript-版本","link":"#ecmascript-版本","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"JavaScript/JavaScript是什么.md"}'),i={name:"JavaScript/JavaScript是什么.md"},d=e('<h1 id="javascript-是什么" tabindex="-1">JavaScript 是什么？ <a class="header-anchor" href="#javascript-是什么" aria-hidden="true">#</a></h1><p>Brendan Eich 花了 10 天时间，设计完成的一门语言。它是个大杂烩，参考了多个语言，例如：</p><ul><li>基本语法：借鉴 C 语言和 Java 语言</li><li>数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类</li><li>函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包</li><li>原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）</li><li>正则表达式：借鉴 Perl 语言</li><li>字符串和数组处理：借鉴 Python 语言</li></ul><p>与此同时，它是一门动态、弱类型的编程语言，非常适合面向对象和函数式的编程风格</p><blockquote><p>动态语言，与之对应的是静态语言，静态语言在编译时变量的数据类型就确定的；而动态语言则是在运行时确定数据类型</p><p>强类型与弱类型，强类型语言一旦变量的类型被确定，就不能被转化，而弱类型的变量类型由应用上下文确定</p></blockquote><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h2><p>基于原型继承，即每个对象拥有一个原型对象，对象又以其原型为模板，从原型继承方法和属性。原型对象也是对象，也拥有原型，并从它的原型继承方法和属性，如此类型，形成原型链。我们会在后文对原型、继承分别进行详细介绍</p><p>函数是一等公民，不仅能像对象一样使用，还拥有函数传值、作为返回值返回。我们亦在后文介绍</p><p>函数作用域，函数作用域为词法作用域，可形成闭包，我们会在后文继续</p><h2 id="由什么组成" tabindex="-1">由什么组成 <a class="header-anchor" href="#由什么组成" aria-hidden="true">#</a></h2><p>JavaScript = ECMAScript + 文档对象模型（DOM）+ 浏览器对象模型（BOM）</p><p>ECMAScript：语言本身，由语法、类型、语句、关键字、保留字、操作符、全局对象组成</p><p>文档对象模型（DOM）：操作 HTML 的 API，名字又多又长，可查文档——<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="noreferrer">MDN</a></p><p>浏览器对象模型（BOM）：操作 浏览器的 API，如 Window、Screen、Location、History、Navigator、弹出框、Timing、Cookies</p><h2 id="ecmascript-版本" tabindex="-1">ECMAScript 版本 <a class="header-anchor" href="#ecmascript-版本" aria-hidden="true">#</a></h2><table><thead><tr><th>时间点</th><th>版本</th></tr></thead><tbody><tr><td>1997.7</td><td>ECMAScript 1.0发布</td></tr><tr><td>1998.6</td><td>ECMAScript 2.0发布</td></tr><tr><td>1999.12</td><td>ECMAScript 3.0发布</td></tr><tr><td>2007.10</td><td>ECMAScript 4.0草案发布，发生分歧</td></tr><tr><td>2008.7</td><td>改善一部分4.0功能，发布ECMAScript 3.1</td></tr><tr><td>2009.12</td><td>ECMAScript 5.0正式发布</td></tr><tr><td>2011.6</td><td>ECMAScript 5.1版发布</td></tr><tr><td>2013.12</td><td>ECMAScript 6 草案发布</td></tr><tr><td>2015.6</td><td>ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”</td></tr></tbody></table><p>自此之后，往后每年发版一个版本，在那年发版就带上年份，如 2022年发布，称为”ECMAScript 2022“，2023年发布”ECMAScript 2023“</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://mp.weixin.qq.com/s/I3wVe5-Ukhb5NluFB7ksnQ" target="_blank" rel="noreferrer">「复习」所以 JavaScript 到底是什么？我居然懵了</a></li><li><a href="https://wangdoc.com/javascript/basic/history.html" target="_blank" rel="noreferrer">JavaScript 语言的历史</a></li></ul>',19),c=[d];function l(p,h,n,o,s,S){return a(),r("div",null,c)}const A=t(i,[["render",l]]);export{v as __pageData,A as default};
