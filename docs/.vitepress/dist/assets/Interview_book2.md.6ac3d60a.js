import{_ as t,c as e,o as l,d as o}from"./app.590c1fbf.js";const S=JSON.parse('{"title":"模拟题二","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/book2.md"}'),r={name:"Interview/book2.md"},a=o('<h1 id="模拟题二" tabindex="-1">模拟题二 <a class="header-anchor" href="#模拟题二" aria-hidden="true">#</a></h1><ol><li>fiber 是什么，为什么需要 fiber</li></ol><p>考察点：fiber 在 react 16 之前面临的主要性能问题是：当组件很庞大时，更新状态可能造成页面卡顿，根本原因在于更新流程是同步、不可中断的。react 16 重写了代码，提出 fiber 架构，它是可异步中断的</p><ol start="2"><li></li><li><p>react 为什么需要合成事件</p></li></ol><p>考察点：合成事件</p><ol start="2"><li>为什么有时 react 两次 setState，只执行了一次</li></ol><p>考察点：批处理</p><ol start="3"><li>redux 有哪些原则</li></ol><p>考察点：redux 核心原则 单一数据源、state 只读、使用 reducer 纯函数修改数据</p><ol start="4"><li>ES5 实现继承</li></ol><p>考察点：继承 原型链继承、借用构造函数继承、组合继承、原型式继承（Object.create）、寄生式继承、寄生组合式继承</p><ol start="5"><li>实现一个 promise</li></ol><p>考察点：promise 原理</p><ol start="6"><li>CSS 选择器有哪些</li></ol><p>考察点：CSS 选择器 id 选择器、class 选择器、标签选择器、通用选择器、属性选择器、相连选择器、子选择器、后代选择器、伪类选择器</p><ol start="7"><li>说下事件模型</li></ol><p>考察点：事件模型 事件流： IE：目标-冒泡 Netscape 早期：捕获-目标 DOM：捕获-目标-冒泡</p><ol start="8"><li>如何减少白屏时间</li></ol><p>考察点：白屏</p><ol start="9"><li>3 次握手过程 第一次握手客户端向服务端发送一个报文，第二次是服务端收到报文后，会应答一个报文给客户端。第三次是客户端收到报文后再给服务端发送一个报文，三次握手久成功了</li></ol><p>考察点：tcp</p><ol start="10"><li>判断链表是否有环</li></ol><p>考察点：链表：链表有环</p>',23),i=[a];function s(p,c,_,n,d,f){return l(),e("div",null,i)}const m=t(r,[["render",s]]);export{S as __pageData,m as default};
