import{_ as l,c as i,o as e,d as T}from"./app.590c1fbf.js";const o=JSON.parse('{"title":"HTTP 是什么","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"优缺点（ HTTP/1.1）","slug":"优缺点-http-1-1","link":"#优缺点-http-1-1","children":[]},{"level":2,"title":"历史时段","slug":"历史时段","link":"#历史时段","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"HTTP/HTTP是什么.md"}'),a={name:"HTTP/HTTP是什么.md"},t=T('<h1 id="http-是什么" tabindex="-1">HTTP 是什么 <a class="header-anchor" href="#http-是什么" aria-hidden="true">#</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h2><p>HTTP 是超文本传输协议。它是协议、也是传输、又是超文本。但它不是互联网、不是编程语言、不是 HTML、不是一个孤立的协议</p><p>它由蒂姆·伯纳斯-李发明，同时，他也是 WWW 的发明人，最初主要用于传递 HTML 封装过的数据</p><p>超文本传输协议，拆分出来就是，”超文本“、”传输“、”协议“</p><p>超文本：比文本更大，它不仅包括文本，还包括图片、音视频等</p><p>传输：它专门用来在两点间传输数据，不能用于广播、寻址或路由</p><p>协议：是计算机世界里的协议，它确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式</p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h2><ul><li>HTTP 是灵活可扩展的，可以任意添加头字段实现任意功能；</li><li>HTTP 是可靠传输协议，基于 TCP/IP 协议“尽量”保证数据的送达；</li><li>HTTP 是应用层协议，比 FTP、SSH 等更通用功能更多，能够传输任意数据；</li><li>HTTP 使用了请求 - 应答模式，客户端主动发起请求，服务器被动回复请求；</li><li>HTTP 本质上是无状态的，每个请求都是互相独立、毫无关联的，协议不要求客户端或服务器记录请求相关的信息。</li></ul><h2 id="优缺点-http-1-1" tabindex="-1">优缺点（ HTTP/1.1） <a class="header-anchor" href="#优缺点-http-1-1" aria-hidden="true">#</a></h2><ul><li><p>HTTP 最大的优点是简单、灵活和易于扩展；</p></li><li><p>HTTP 拥有成熟的软硬件环境，应用的非常广泛，是互联网的基础设施；</p></li><li><p>HTTP 是无状态的，可以轻松实现集群化，扩展性能，但有时也需要用 Cookie 技术来实现“有状态”；</p><ul><li>因为 Cookie，又有了 XSS、CSRF 等 web 安全问题</li></ul></li><li><p>HTTP 是明文传输，数据完全肉眼可见，能够方便地研究分析，但也容易被窃听；</p></li><li><p>HTTP 是不安全的，无法验证通信双方的身份，也不能判断报文是否被窜改；</p><ul><li>所以有了 HTTPS</li><li>HTTPS 相对 HTTP 有了安全性、机密性、完整性、身份认知、不可否认等特点 <ul><li>安全性：由 TLS 协议保证</li><li>机密性：对称加密与非对称加密</li><li>完整性：...</li></ul></li></ul></li><li><p>HTTP 的性能不算差，但不完全适应现在的互联网，还有很大的提升空间</p><ul><li>性能一般，所以有各种优化手段，HTTP1.1 的优化手段就有并发连接、域名分片</li><li>所以才有了 HTTP2，从协议层解决队头阻塞问题</li><li>后来又有了 HTTP3，将 TCP 协议换成 UDP，解决 TCP 的队头阻塞</li></ul></li></ul><h2 id="历史时段" tabindex="-1">历史时段 <a class="header-anchor" href="#历史时段" aria-hidden="true">#</a></h2><ul><li>1991 年发布 HTTP 0.9 <ul><li>只支持纯文本格式</li><li>只支持 GET 请求</li></ul></li><li>1996 年发布 1.0 版 <ul><li>增加了 HEAD、POST 等新方法</li><li>没有长连接，每次发送请求，都要链接一个 TCP</li></ul></li><li>1997 年发布 1.1 版 <ul><li>至今传输最广泛的版本</li><li>加上 connection： keep-alive （长连接），复用一个 TCP 连接</li><li>优点（特点） <ul><li>长连接（持久连接）：响应头中设置 keep-alive，可以在一个 TCP 连接上发送多个 HTTP 请求</li></ul></li><li>存在的问题 <ul><li>对带宽的利用率并不理想（三个主要原因） <ul><li>TCP 的慢启动</li><li>多条 TCP 连接竞争带宽</li><li>队头阻塞（主因） <ul><li>工作流程是请求-响应，请求发出去等待响应，然后在发送下一次请求。队头请求处理太慢，就会阻塞后面的请求处理</li><li>发起了请求，但是响应还没回应，引起了“塞车”</li></ul></li></ul></li><li>（队头阻塞）解决方法： <ul><li>并发连接（多建立几个 TCP 连接） <ul><li>同一个服务器，最多建立 6 个连接</li></ul></li><li>域名分片 <ul><li>多几个域名</li><li>例如：把图片资源、js、css 分别部署在 10 个服务器，可以同时下载 60 个文件</li></ul></li><li>多路复用 <ul><li>HTTP2 解决方案</li></ul></li></ul></li><li>此时的前端优化方案（网络层面） <ul><li>减少请求数量（例如雪碧图）、内敛一些资源：css、base64 图片、合并小文件等</li></ul></li></ul></li></ul></li><li>2015 年发布 2.0 版 <ul><li>基于 SPDY 协议</li><li>解决 HTTP1.1 的队头阻塞问题，让同一个 TCP 连接上发送所有 HTTP 请求</li><li>优点： <ul><li>多路复用：相同域名多个请求，共享同一个 TCP 连接</li><li>二进制传输：之前是纯文本传输</li><li>请求优先级：给每个 request 设置优先级</li><li>数据流：每个请求和影响都当作一个流，</li><li>服务器推送：可以主动向客户端发送消息</li><li>头部压缩：减少包的大小和数量</li></ul></li><li>缺点： <ul><li>TCP 以及 TCP+ TLS 建立连接的延时</li><li>还是会存在队头阻塞，不过是 TCP 的队头阻塞</li><li>多路复用导致服务器压力上升</li><li>多路复用容易 Timeout</li></ul></li></ul></li><li>2018 年发布 3.0 版 <ul><li>Google 发明了一个新的协议，叫做 QUIC，它基于 UDP 协议，取代 TCP 协议</li><li>因为 TCP 会丢包，所以改用另外一个协议</li><li>一旦 TCP 层出现丢包，依然会出现队头阻塞问题（Stream 丢失），使用 UDP 协议能从根本上解决了队头阻塞的问题</li><li>特点： <ul><li>改进的拥塞控制、可靠传输</li><li>快速握手</li><li>继承了 TLS 1.3 加密</li><li>多路复用</li><li>连接迁移</li></ul></li></ul></li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://time.geekbang.org/column/intro/100029001" target="_blank" rel="noreferrer">透视 HTTP 协议</a></li><li><a href="https://coolshell.cn/articles/19840.html" target="_blank" rel="noreferrer">HTTP 的前世今生</a></li></ul>',16),r=[t];function u(P,h,n,s,d,p){return e(),i("div",null,r)}const H=l(a,[["render",u]]);export{o as __pageData,H as default};
