import{_ as e,c as r,o as a,d as o}from"./app.590c1fbf.js";const g=JSON.parse('{"title":"docker 基本介绍","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"一句话总结","slug":"一句话总结","link":"#一句话总结","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"为什么要用 docker","slug":"为什么要用-docker","link":"#为什么要用-docker","children":[]},{"level":3,"title":"docker 是什么","slug":"docker-是什么","link":"#docker-是什么","children":[]},{"level":3,"title":"docker 的优点","slug":"docker-的优点","link":"#docker-的优点","children":[]}]},{"level":2,"title":"启动一个 Docker 容器","slug":"启动一个-docker-容器","link":"#启动一个-docker-容器","children":[]},{"level":2,"title":"docker 的三个概念","slug":"docker-的三个概念","link":"#docker-的三个概念","children":[{"level":3,"title":"镜像（Image）","slug":"镜像-image","link":"#镜像-image","children":[]},{"level":3,"title":"容器（Container）","slug":"容器-container","link":"#容器-container","children":[]},{"level":3,"title":"仓库（Repository）","slug":"仓库-repository","link":"#仓库-repository","children":[]}]},{"level":2,"title":"基于 docker 的开发过程","slug":"基于-docker-的开发过程","link":"#基于-docker-的开发过程","children":[]},{"level":2,"title":"docker 架构图","slug":"docker-架构图","link":"#docker-架构图","children":[]}],"relativePath":"Docker/docker基本介绍.md"}'),d={name:"Docker/docker基本介绍.md"},i=o('<h1 id="docker-基本介绍" tabindex="-1">docker 基本介绍 <a class="header-anchor" href="#docker-基本介绍" aria-hidden="true">#</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h2><p>Docker 是一种虚拟机技术，比传统虚拟机（如 vmware、virtualbox）要更加简单、轻量</p><ul><li>启动快</li><li>资源占用少</li><li>体积小</li></ul><h2 id="一句话总结" tabindex="-1">一句话总结 <a class="header-anchor" href="#一句话总结" aria-hidden="true">#</a></h2><p>dockerfile：类似于“package.json”</p><p>Image：类似于”Win7 纯净版.rar“</p><p>Container: 一个完整的操作系统</p><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-hidden="true">#</a></h2><p>之前使用虚拟机（vmware、virtualbox）时，步骤如下</p><ul><li><p>下载一个 <code>centos.iso</code> 文件</p></li><li><p>使用 vmware 安装一个系统 A</p></li><li><p>使用 vmware 安装一个系统 B</p></li><li><p>...</p></li></ul><p>此处的 <code>centos.ios</code> 文件就是一个 image 镜像，安装出来的系统就是一个一个 container 容器</p><p>docker 的所有 image 都可以在 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com/</a> 搜索并下载，还可以自定义 image 上传到这个仓库</p><p><img src="https://i.loli.net/2021/09/12/LoxTrBCjHymvEia.png" alt="一图概述docker"></p><h3 id="为什么要用-docker" tabindex="-1">为什么要用 docker <a class="header-anchor" href="#为什么要用-docker" aria-hidden="true">#</a></h3><p><img src="https://i.loli.net/2021/08/18/UwI9zfLo7pmKHJO.png" alt="虚拟机VSDocker"></p><p><img src="https://s2.loli.net/2022/04/23/LvHYhegzBnAOoDJ.jpg" alt="虚拟机和容器"></p><p>如上两图所示，容器技术将常见的技术封装到容器中，并通过 namespace 和 control groups 对每个容器进行分离，将重复的资源公有化，除此之外，还能做到应用程序的环境统一化</p><blockquote><p>容器是一种通用技术，docker 只是其中的一种实现</p></blockquote><h3 id="docker-是什么" tabindex="-1">docker 是什么 <a class="header-anchor" href="#docker-是什么" aria-hidden="true">#</a></h3><p>docker 是用 Go 语言实现的开源项目，可以让我们方便的创建和使用容器，docker 将程序以及程序所有的依赖都打包到 docker container，这样你的程序可以在任何环节都会有一致的表现</p><h3 id="docker-的优点" tabindex="-1">docker 的优点 <a class="header-anchor" href="#docker-的优点" aria-hidden="true">#</a></h3><p>环境隔离、更快速地交付部署、更高效的资源利用、更易迁移扩展、更简单的更新管理、重启更快</p><h2 id="启动一个-docker-容器" tabindex="-1">启动一个 Docker 容器 <a class="header-anchor" href="#启动一个-docker-容器" aria-hidden="true">#</a></h2><p>如果没有安装，可以再 <a href="https://labs.play-with-docker.com/" target="_blank" rel="noreferrer">play with docker</a> 或者 <a href="https://www.freeaihub.com/kubernetes/setup.html" target="_blank" rel="noreferrer">freeaihub</a> 体验一下</p><h2 id="docker-的三个概念" tabindex="-1">docker 的三个概念 <a class="header-anchor" href="#docker-的三个概念" aria-hidden="true">#</a></h2><p>docker 的整个生命周期由三部分组成：镜像（image）+ 容器（constainer）+ 仓库（repository）</p><p>每台宿主机（电脑），下载好了 docker 后，可以生成多个镜像，每个镜像，可以创建多个容器。发布到仓库时，以镜像为单位。可以理解成：一个容器就是一个独立的虚拟操作系统，互不影响，而镜像就是这个操作系统的安装包。想要生成一个容器，就要安装包（镜像）生成一次，这就是 Docker 的核心概念</p><h3 id="镜像-image" tabindex="-1">镜像（Image） <a class="header-anchor" href="#镜像-image" aria-hidden="true">#</a></h3><p>类似于虚拟机上的镜像，是一个包含有文件系统的面向 docker 引擎的<strong>只读</strong>模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个 Ubuntu 镜像就是一个包含 Ubuntu 操作系统环境的模板（安装包），同理在该镜像上装上 Apache 软件，就可以称为 Apache 镜像</p><h3 id="容器-container" tabindex="-1">容器（Container） <a class="header-anchor" href="#容器-container" aria-hidden="true">#</a></h3><p>类似于一个轻量级的沙盒，可以将其看作一个极简的 Linux 系统环境（包括 root 权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker 引擎利用容器来运行，隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是相互隔离的，互不影响。</p><p>注意：镜像本身是只读的，容器从镜像启动时，Docker 在镜像的上层创建一个可写层，镜像本身不变。</p><h3 id="仓库-repository" tabindex="-1">仓库（Repository） <a class="header-anchor" href="#仓库-repository" aria-hidden="true">#</a></h3><p>类似于代码仓库，这里是镜像仓库，是 Docker 用来集中存放镜像文件的地方。</p><p>注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用 tag 进行区分，比如 Ubuntu 仓库存放有多个版本（12.04、14.04 等）的 Ubuntu 镜像</p><h2 id="基于-docker-的开发过程" tabindex="-1">基于 docker 的开发过程 <a class="header-anchor" href="#基于-docker-的开发过程" aria-hidden="true">#</a></h2><p>开发者通过 dockerfile 生成（build）一个镜像（image），通过 <code>docker run ...</code> 生成一个容器（constainer），可以把这个镜像推送至远程仓库上（<code>docker push</code>），既可以供别人下载（<code>docker pull</code>）再 run 生成容器。而一些环境变量可以写进 dockerfile 中，这样就保持了环境的一致性，可移植到任何服务器上</p><h2 id="docker-架构图" tabindex="-1">docker 架构图 <a class="header-anchor" href="#docker-架构图" aria-hidden="true">#</a></h2><p><img src="https://s2.loli.net/2022/04/23/uYm2lQ5oEVb4Csw.jpg" alt="docker架构图"></p>',40),c=[i];function t(l,n,h,s,k,p){return a(),r("div",null,c)}const m=e(d,[["render",t]]);export{g as __pageData,m as default};
