import{_ as s,c as a,o as n,d as l}from"./app.590c1fbf.js";const d=JSON.parse('{"title":"快问快答 setState","description":"","frontmatter":{},"headers":[{"level":2,"title":"基础认识","slug":"基础认识","link":"#基础认识","children":[{"level":3,"title":"setState 是同步还是异步的？","slug":"setstate-是同步还是异步的","link":"#setstate-是同步还是异步的","children":[]},{"level":3,"title":"为什么这么设计？","slug":"为什么这么设计","link":"#为什么这么设计","children":[]},{"level":3,"title":"setState 引发的生命周期","slug":"setstate-引发的生命周期","link":"#setstate-引发的生命周期","children":[]},{"level":3,"title":"setState 怎么才能获取最新的 state","slug":"setstate-怎么才能获取最新的-state","link":"#setstate-怎么才能获取最新的-state","children":[]},{"level":3,"title":"为什么要 setState，而不直接修改 state（this.state.xx = oo）","slug":"为什么要-setstate-而不直接修改-state-this-state-xx-oo","link":"#为什么要-setstate-而不直接修改-state-this-state-xx-oo","children":[]},{"level":3,"title":"setState 异步的原理","slug":"setstate-异步的原理","link":"#setstate-异步的原理","children":[]}]},{"level":2,"title":"面试吊打","slug":"面试吊打","link":"#面试吊打","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"React/快问快答setState.md"}'),e={name:"React/快问快答setState.md"},p=l(`<h1 id="快问快答-setstate" tabindex="-1">快问快答 setState <a class="header-anchor" href="#快问快答-setstate" aria-hidden="true">#</a></h1><h2 id="基础认识" tabindex="-1">基础认识 <a class="header-anchor" href="#基础认识" aria-hidden="true">#</a></h2><h3 id="setstate-是同步还是异步的" tabindex="-1">setState 是同步还是异步的？ <a class="header-anchor" href="#setstate-是同步还是异步的" aria-hidden="true">#</a></h3><p>分情况。合成事件、钩子函数中调用，表现为“异步”；原生事件、setTimeout/setInterval、Promise 等原生 API 调用则是同步。</p><h3 id="为什么这么设计" tabindex="-1">为什么这么设计？ <a class="header-anchor" href="#为什么这么设计" aria-hidden="true">#</a></h3><p>为了做<strong>性能优化</strong>，React 会将多个 this.setState 产生的修改放在一个队列里，最后批量合成再去渲染，提高性能。如果每次的状态更新都去重新渲染真实 dom，会引起巨大的性能消耗</p><ul><li>为什么会引起性能的消耗？ <ul><li>先是每次调用 setState 都要走一遍生命钩子函数</li><li>再则是 render 之后形成新的虚拟 dom ，新旧虚拟 dom 做对比，diff 需要花费性能</li><li>然后把 diff 后的 patch 更新到真实 dom 上，也需要消耗性能</li></ul></li></ul><h3 id="setstate-引发的生命周期" tabindex="-1">setState 引发的生命周期 <a class="header-anchor" href="#setstate-引发的生命周期" aria-hidden="true">#</a></h3><ul><li>static getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li>UNSAFE_componentWillUpdate</li><li>render</li><li>getSnapshotBeforeUpdate</li><li>componentDidUpdate</li></ul><p>当 getDerivedStateFromProps 被调用时，this.state 没有得到更新</p><p>当 shouldComponentUpdate 被调用时，this.state 没有得到更新</p><p>当 UNSAFE_componentWillUpdate 被调用时，this.state 依然没有得到更新</p><p>直到 render 被调用时，this.state 才得到更新</p><h3 id="setstate-怎么才能获取最新的-state" tabindex="-1">setState 怎么才能获取最新的 state <a class="header-anchor" href="#setstate-怎么才能获取最新的-state" aria-hidden="true">#</a></h3><p>setState 的第二个参数时可选的回调函数 <code>setState(stateChange[, callback])</code> 。它将在 setState 完成合并 hou 重新渲染组件并执行。通常，用 componentDidUpdate 来代替此方法</p><p>为什么？</p><p><a href="https://stackoverflow.com/questions/56501409/what-is-the-advantage-of-using-componentdidupdate-over-the-setstate-callback" target="_blank" rel="noreferrer">stackoverflow</a> 有人问过，也有人回答过</p><ul><li><p>一致的逻辑</p><ul><li>两个不同的方法调用 this.setState，一个有第二个参数，一个没有，不一致</li></ul></li><li><p>批量更新</p><ul><li>查看 <a href="https://codesandbox.io/s/blue-moon-mj5fz?file=/src/App.js" target="_blank" rel="noreferrer">demo</a></li></ul></li><li><p>什么时候 setState 会比较好？</p><ul><li>当外部代码需要等待状态更新时，将它包装到 promise.resolve 中</li></ul></li></ul><h3 id="为什么要-setstate-而不直接修改-state-this-state-xx-oo" tabindex="-1">为什么要 setState，而不直接修改 state（this.state.xx = oo） <a class="header-anchor" href="#为什么要-setstate-而不直接修改-state-this-state-xx-oo" aria-hidden="true">#</a></h3><p>setState 做的事情不仅时修改 this.state 的值，它还会触发 React 的更新机制，进行 diff，然后将 patch 部分更新到真实 dom 里。</p><p>如果直接 this.state.xx = oo 的话，state 虽然修改，但不会触发 UI 重渲染</p><h3 id="setstate-异步的原理" tabindex="-1">setState 异步的原理 <a class="header-anchor" href="#setstate-异步的原理" aria-hidden="true">#</a></h3><p>setState 的函数实现中，会根据 isBatchingUpdates（默认是 false）变量判断是否直接更新 this.state 还是放到队列中稍后更新。有一个 batchedUpdate 函数，可以修改 isBatchingUpdates 为 tue，当 React 调用事件处理函数之前或者生命周期函数之前就会调用 batchedUpdate 函数，这样的话，setState 就不会同步更新 this.state，而是放到更新队列里面后续更新</p><p><img src="https://i.loli.net/2021/09/13/yJb7HlFMe5pAZkU.png" alt="setState原理"></p><p>setState 执行过程</p><p><a href="https://juejin.cn/post/6844903781813993486#heading-5" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903781813993486#heading-5</a></p><h2 id="面试吊打" tabindex="-1">面试吊打 <a class="header-anchor" href="#面试吊打" aria-hidden="true">#</a></h2><p>一、如下的代码，它的 a 的值是多少？组件 C 又 render 了几次</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentDidMount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>思路：</p><p>生命周期中 render 在 componentDidMount 前执行</p><p>componentDidMount 钩子函数中的执行顺序：</p><p>先进行同步代码，</p><ol><li>this.setState({ a: 1 })</li><li>resolve(this.setState({ a: 3 }));</li></ol><p>再执行 Promise 的微任务</p><ol start="3"><li>this.setState({ a: 4 });</li></ol><p>最后执行 setTimeout 中的宏任务</p><ol start="4"><li>this.setState({ a: 2 });</li></ol><p>可以得出：</p><p>第一次 render，a 的值为 0</p><p>第二次 this.setState 批处理合并 a 为 3，再一次触发 render</p><p>第三次 Promise 引发的 render，a 为 4</p><p>第四次 setTimeout 引发的 render，a 为 2</p><p>附上在线 <a href="https://codesandbox.io/s/exciting-brattain-1pi5m?file=/src/App.js" target="_blank" rel="noreferrer">demo</a></p><p>二、看看这道题，console 中的值是什么？组件 App 又渲染了几次</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentDidMount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">className</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">App</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;{this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>思路：</p><ul><li><p>setState 有同步执行的代码，也有异步的。合成事件、生命周期钩子函数为异步执行，原生事件、setTimeout、promise 等原生 API 为同步代码</p></li><li><p>setState 又会被批处理，即在合成事件、生命周期钩子函数中多次调用 setState 函数产生的效果会合并</p></li></ul><p>componentDidMount 中的代码是同步执行，但是表现为异步（因为批处理）。按顺序执行，第一个 val 为 0，第二个 val 也为 0。接着进行批处理，合并 <code>Object.assign(val, {val: this.state.val + 1}, {val: this.state.val + 2})</code>。所以当同步代码执行完后 val 的值为 2</p><p>接着执行 setTimeout 中的代码，setTimeout 中的第一个，也就是第三个 val 为 2。接下来执行 setState，同步执行，render 一次，第四个 val 为 3。最后执行 setState，也是同步执行，render 一次，第五个 val 为 4。</p><p>所以 <code>console.log()</code> 中的值为 0、0、2、3、4。render 的次数为 4 次</p><p>可以在这里查看 <a href="https://codesandbox.io/s/setstate-216l6?file=/src/App.js" target="_blank" rel="noreferrer">demo</a></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/25954470" target="_blank" rel="noreferrer">setState：这个 API 设计到底怎么样</a></li><li><a href="https://zhuanlan.zhihu.com/p/25990883" target="_blank" rel="noreferrer">setState 为什么不会同步更新组件状态</a></li><li><a href="https://zhuanlan.zhihu.com/p/26069727" target="_blank" rel="noreferrer">setState 何时同步更新状态</a></li><li><a href="https://segmentfault.com/a/1190000015615057" target="_blank" rel="noreferrer">浅入深出 setState（上篇）</a></li><li><a href="https://segmentfault.com/a/1190000015821018" target="_blank" rel="noreferrer">浅入深出 setState（下篇）</a></li><li><a href="https://keqingrong.cn/blog/2019-04-01-react-setstate" target="_blank" rel="noreferrer">重新认识 React 的 setState</a></li><li><a href="https://zhuanlan.zhihu.com/p/39512941" target="_blank" rel="noreferrer">你真的理解 setState 吗？</a></li><li><a href="https://mp.weixin.qq.com/s/my2Jx7pcbVYnaCWklAzKXA" target="_blank" rel="noreferrer">setState 到底是同步的，还是异步的</a></li><li><a href="https://segmentfault.com/a/1190000040445026" target="_blank" rel="noreferrer">React 中 setState 是一个宏任务还是微任务？</a></li><li><a href="https://stackoverflow.com/questions/56501409/what-is-the-advantage-of-using-componentdidupdate-over-the-setstate-callback" target="_blank" rel="noreferrer">What is the advantage of using componentDidUpdate over the setState callback?</a></li></ul>`,54),t=[p];function o(r,c,F,i,y,D){return n(),a("div",null,t)}const A=s(e,[["render",o]]);export{d as __pageData,A as default};
