import{_ as e,c as l,o as s,d as a}from"./app.590c1fbf.js";const h=JSON.parse('{"title":"flex 从总结到了解","description":"","frontmatter":{},"headers":[{"level":2,"title":"flex 语法","slug":"flex-语法","link":"#flex-语法","children":[{"level":3,"title":"转为文字表述","slug":"转为文字表述","link":"#转为文字表述","children":[]}]},{"level":2,"title":"flex 属性值场景应用","slug":"flex-属性值场景应用","link":"#flex-属性值场景应用","children":[{"level":3,"title":"默认值 flex: initial","slug":"默认值-flex-initial","link":"#默认值-flex-initial","children":[]},{"level":3,"title":"flex: 0 和 flex: none 的区别","slug":"flex-0-和-flex-none-的区别","link":"#flex-0-和-flex-none-的区别","children":[]},{"level":3,"title":"flex: 1 和 flex: auto 的区别和适用场景","slug":"flex-1-和-flex-auto-的区别和适用场景","link":"#flex-1-和-flex-auto-的区别和适用场景","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"Basic/CSS/flex.md"}'),o={name:"Basic/CSS/flex.md"},n=a(`<h1 id="flex-从总结到了解" tabindex="-1">flex 从总结到了解 <a class="header-anchor" href="#flex-从总结到了解" aria-hidden="true">#</a></h1><p>flex 是一种布局方式，在 CSS3 之后开始有。它主要由父容器和子项组成，父容器有六个属性，分别为：</p><ul><li>控制主轴轴向：<code>flex-direction</code><ul><li>row：横轴（默认）</li><li>row-reverse：倒过来的横轴</li><li>column：竖轴</li><li>column-reverse：倒过来的竖轴</li></ul></li><li>换行方式：<code>flex-wrap</code><ul><li>nowrap：不换行（默认）</li><li>wrap：换行</li><li>wrap-reverse：反着换行</li></ul></li><li>主轴排列：<code>justify-content</code></li><li>交叉轴排列：<code>align-items</code></li><li>轴向与换行组合设置：<code>flex-flow</code>（流向） <ul><li>一般很少用这个属性，即改变子项的布局顺序，正着来，倒着来</li></ul></li></ul><p>子项也有六个属性，分别为：</p><ul><li>弹性扩展：<code>flex-grow</code><ul><li>指定容器剩余空间多余时的分配规则</li><li>默认值为 0，多余空间不分配</li></ul></li><li>弹性收缩：<code>flex-shrink</code><ul><li>指定容器剩余空间不足时的分配规则</li><li>默认值为 1，空间不足要分配；如果为 0，表示不分配</li></ul></li><li>基础尺寸：<code>flex-basis</code><ul><li>指定 flex 元素在主轴方向上的初始大小（基础尺寸）</li><li>默认值为 auto，即项目本身大小</li><li>浏览器会根据 flex-basis 计算主轴是否有剩余空间，与宽度有关，优先级如何划分 <ul><li>max-width/min-width &gt; flex-basis &gt; width &gt; box</li></ul></li></ul></li><li><strong>缩写：<code>flex</code></strong><ul><li>flex-grow、flex-shrink、flex-basis 的缩写</li><li>默认值为 0 1 auto</li></ul></li><li>主轴顺序：<code>order</code></li><li>交叉轴对齐方式：<code>align-self</code></li></ul><p>总的来说，<strong>父容器控制整体布局，子项控制子项布局</strong></p><p>在面试中，常常不会问怎么宽泛，最常见的 flex 面试题为：</p><ul><li><code>flex: 0 1 auto</code> 怎么理解？</li><li><code>flex: 1</code>具体代表什么，有什么应用场景</li><li><code>flex: 0</code>、<code>flex: 1</code>、<code>flex: none</code>、<code>flex: auto</code>，表示什么意思，并应用在什么场景下使用？</li></ul><p>要想回答这些问题，我们必须了解子项中的 flex 属性</p><h2 id="flex-语法" tabindex="-1">flex 语法 <a class="header-anchor" href="#flex-语法" aria-hidden="true">#</a></h2><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">flex: none </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> auto </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">&lt; </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-grow</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> &gt; &lt; </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-shrink</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> &gt;? </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> &lt; </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-basis</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> &gt; </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>单管道符 <code>|</code> ，表示排他。也就是这个符号前后的属性值都是支持的，且不能同时出现。因此，下面这些语法都是支持的：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">flex: auto;</span></span>
<span class="line"><span style="color:#A6ACCD;">flex: none;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">flex: </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">&lt; </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-grow</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> &gt; &lt; </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-shrink</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> &gt;? </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> &lt; </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-basis</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> &gt;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>方括号 <code>[...]</code> 表示范围。支持的属性在这个范围内</p><p>其中 <code>?</code> ，表示 0 个或者 1 个，也就是说 <code>flex-shrink</code> 属性可有可无。因为 flex 属性值也可以是 2 个值</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">flex: auto;</span></span>
<span class="line"><span style="color:#A6ACCD;">flex: none;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 2个值 */</span></span>
<span class="line"><span style="color:#A6ACCD;">flex: 1 100px;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 3个值 */</span></span>
<span class="line"><span style="color:#A6ACCD;">flex: 1 1 100px;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>双管道 <code>||</code> ，表示”或者“的意思。表示前后可以分开独立使用，也就是 <code>flex: flex-grow flex-shrink?</code> 和 <code>flex-basis</code> 都是合法的。于是我们又多了 2 种合法的写法：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 1个值，flex-basis */</span></span>
<span class="line"><span style="color:#A6ACCD;">flex: 100px;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 2个值，flex-grow 和 flex-shrink */</span></span>
<span class="line"><span style="color:#A6ACCD;">flex: 1 1;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="转为文字表述" tabindex="-1">转为文字表述 <a class="header-anchor" href="#转为文字表述" aria-hidden="true">#</a></h3><p>单值语法：</p><p>​ 如果 flex 的属性值只有一个值，有三种情况</p><ul><li><p>一个无单位数，例如例如 <code>flex: 1</code>，表示 <code>flex-shrink: 1</code>，剩余空间扩展。此时，<code>flex-shrink</code> 和 <code>flex-basis</code> 的值分别是 1 和 0%。注意，这里的 <code>flex-basis</code> 的值是 0%，而不是默认值 <code>auto</code></p><ul><li>只要改变 <code>flex: 数字</code>，<code>flex-basis</code> 的值就为 0</li></ul></li><li><p>一个有效的宽度（width）值，表现形式为长度值，例如 <code>flex: 100px</code>，表示<code>flex-basis: 100px</code>，基础尺寸为 100px。此时，<code>flex-grow</code> 和 <code>flex-shrink</code> 的值都是 1，注意，这里的 <code>flex-grow</code> 的值是 1，而不是默认值 0</p></li><li><p>关键字 <code>none</code>，<code>auto</code> 或 <code>initial</code></p></li></ul><p>双值语法：</p><p>​ 如果 flex 的属性值有两个值，则第 1 个值一定是 <code>flex-grow</code>，第 2 个根据值的类型不同表示不同的 CSS 属性，具体规则如下：</p><ul><li>数值：例如<code>flex: 1 2</code>，则这个 2 表示 <code>flex-shrink</code>，此时 <code>flex-basis</code> 的值为 0%，而非默认值 auto</li><li>长度值，例如<code>flex: 1 100px</code>，则这个 <code>100px</code> 值 <code>flex-basis</code>，此时 <code>flex-shrink</code> 默认值为 0</li></ul><p>三值语法：</p><p>​ 如果 flex 的属性值有 3 个值，则长度值表示 <code>flex-basis</code>，其余 2 个数值分别表示<code>flex-grow</code> 和 <code>flex-shrink</code>。下面两行 CSS 语句的语法都是合法的，且含义也是一样的：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">flex: 1 2 50%;</span></span>
<span class="line"><span style="color:#A6ACCD;">flex: 50% 1 2;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="flex-属性值场景应用" tabindex="-1">flex 属性值场景应用 <a class="header-anchor" href="#flex-属性值场景应用" aria-hidden="true">#</a></h2><p>flex 默认值为 0 1 auto。除此之外，还有各种其他值</p><ul><li><p>flex: none，等同于 flex: 0 0 auto;</p></li><li><p>flex: auto，等同于 flex: 1 1 auto;</p></li><li><p>flex: 1，等同于 flex: 1 1 0%;</p></li><li><p>flex: 0，等同于 flex 0 1 0%;</p></li></ul><p>张鑫旭大神画过一张图：</p><table><thead><tr><th>单值语法</th><th>等同于</th><th>备注</th></tr></thead><tbody><tr><td>flex: initial</td><td>flex: 0 1 auto</td><td>初始值，常用</td></tr><tr><td>flex: 0</td><td>flex: 0 1 0%</td><td>适用场景少</td></tr><tr><td>flex: none</td><td>flex: 0 0 auto</td><td>推荐</td></tr><tr><td>flex: 1</td><td>flex: 1 1 0%</td><td>推荐</td></tr><tr><td>flex: auto</td><td>flex: 1 1 auto</td><td>适用场景少</td></tr></tbody></table><h3 id="默认值-flex-initial" tabindex="-1">默认值 flex: initial <a class="header-anchor" href="#默认值-flex-initial" aria-hidden="true">#</a></h3><p>它等同于 <code>flex:0 1 auto</code>，表示 flex 容器有剩余空间时尺寸不增长（<code>flex-grow: 0</code>），flex 容器尺寸不足时尺寸会收缩变小（<code>flex-shrink:1</code>），尺寸自适应于内容（<code>flex-basis:auto</code>）</p><p>我的理解：子项总长度小于总容器时，不会去撑满（<code>flex-grow:0</code>），而按实际宽高度存在(<code>flex-basis:auto</code>)；当子项总长度大于总容器时，子项会相对于的收缩相对比例（<code>flex-shrink:1</code>）</p><h4 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-hidden="true">#</a></h4><p>适用于子项总长度小于总容器的场景，例如按钮、标题、小图标等小部件的排版布局</p><h3 id="flex-0-和-flex-none-的区别" tabindex="-1">flex: 0 和 flex: none 的区别 <a class="header-anchor" href="#flex-0-和-flex-none-的区别" aria-hidden="true">#</a></h3><p><code>flex: 0</code> 等同于设置 <code>flex: 0 1 0%</code>，<code>flex:none</code> 等同于 <code>flex: 0 0 auto</code></p><p><code>flex: 0</code>，因为是一个值且为数值，所以它表示 <code>flex-grow</code>，后续我发现只用设置了<code>flex: 数字</code>，那么 <code>flex-basis</code> 就自动成了 0%，所以，设置<code>flex:0</code> 的元素的最终尺寸表示为最小内容宽度；</p><blockquote><p>注意：</p><p>flex: 1 === flex: 1 1 0%</p><p>flex: 0 === flex: 0 1 0%</p><p>flex 设置为数字后，虽然 <code>flex-basis</code> 为最小宽度，但是前者的 <code>flex-grow</code> 有值，可以把子项扩充满容器，后者为 0，不扩展</p></blockquote><p><code>flex: none</code>，既不是数值也不是长度值，<code>none</code> 关键字。<code>flex: 0 0 auto</code> 表示元素尺寸不会收缩也不会扩展，再加上 <code>flex-basis: auto</code> 表示固定尺寸由内容决定，由于元素不具有弹性，因为，元素内的元素不会换行，最终尺寸通常表现为最大内容宽度</p><h4 id="适用使用-flex-0-的场景" tabindex="-1">适用使用 flex: 0 的场景 <a class="header-anchor" href="#适用使用-flex-0-的场景" aria-hidden="true">#</a></h4><p><img src="https://i.loli.net/2021/10/19/PpGRc8WHfSVTw9a.png" alt="flex：0的应用场景"></p><p>无论文字的内容给如何设置，左侧内容的宽度都是图像的宽度</p><h4 id="适合使用-flex-none-的场景" tabindex="-1">适合使用 flex: none 的场景 <a class="header-anchor" href="#适合使用-flex-none-的场景" aria-hidden="true">#</a></h4><p>当 flex 子项的宽度就是内容的宽度，且内容永远不会换行，则适合使用 <code>flex:none</code>，例如如下的场景，图片和按钮固定长度，内容弹性</p><p><img src="https://i.loli.net/2021/10/19/ANQzfkuT4xiaXsO.png" alt="flex:none适用场景"></p><h3 id="flex-1-和-flex-auto-的区别和适用场景" tabindex="-1">flex: 1 和 flex: auto 的区别和适用场景 <a class="header-anchor" href="#flex-1-和-flex-auto-的区别和适用场景" aria-hidden="true">#</a></h3><p><code>flex:1</code> 等同于设置 <code>flex: 1 1 0%</code> ，<code>flex: auto</code> 等同于 <code>flex: 1 1 auto</code></p><p>可以看出两者的 <code>flex-grow</code> 和 <code>flex-shrink</code> 都是一样的，意味着它们都可以弹性扩展以及弹性收缩，区别在于 <code>flex: 1</code> 中 <code>flex-basis</code> 为 0，即子项的初始大小（宽度）为 0。<code>flex:auto</code> 中的 <code>flex-basis</code>为 auto，即宽度为自身宽度</p><p>表现的样子为：</p><p><img src="https://i.loli.net/2021/10/19/SKf1ap8zXUxWiMP.png" alt="flex:1"></p><p>这里需要解释一下，因为我最开始也不理解，其公式为：</p><p><strong>每个子项的宽度 = （总宽度 - <code>flex-basis</code> 的初始大小）/ 子项个数</strong></p><p>以这个例子为例，</p><p>当<code>flex:1</code> 时，即<code>flex: 1 1 0%</code>， <code>flex-basis</code> 为 0，初始大小为 0，所以每个子项等分</p><p>当 <code>flex:auto</code> 时，即 <code>flex: 1 1 auto</code>， <code>flex-basis</code> 为 auto，初始大小为自身大小，总宽度 - 每个子项的宽度后，剩余的空间等分给每一项</p><h4 id="适用于-flex-1-的场景" tabindex="-1">适用于 flex: 1 的场景 <a class="header-anchor" href="#适用于-flex-1-的场景" aria-hidden="true">#</a></h4><p>当希望元素充分利用剩余空间，同时不会侵占其他元素应用的宽度的适用，适合适用 <code>flex:1</code>，例如所有的等分列表</p><p>之前适用 <code>flex: none</code> 的例子，同样设置文字部分<code>flex: 1</code> 也能实现类似的效果</p><p><img src="https://i.loli.net/2021/10/19/xjmG7w3JEhv86Ms.png" alt="flex:1"></p><h4 id="适用于-flex-auto-的场景" tabindex="-1">适用于 flex: auto 的场景 <a class="header-anchor" href="#适用于-flex-auto-的场景" aria-hidden="true">#</a></h4><p>当希望元素充分利用剩余空间，但是各自的尺寸按照各自内容进行分配的时候，适用于 <code>flex: auto</code></p><p>例如导航数量不固定，每个导航文字数量页不固定的导航效果就适合适用 <code>flex: auto</code></p><p><img src="https://i.loli.net/2021/10/19/z5jdOucg6e3UxHq.png" alt="flex-auto"></p><p>回过头来看之前说的面试题</p><ol><li><code>flex: 0 1 auto</code> 怎么理解？</li><li><code>flex: 1</code>具体代表什么，有什么应用场景</li><li><code>flex: 0</code>、<code>flex: 1</code>、<code>flex: none</code>、<code>flex: auto</code>，表示什么意思，并应用在什么场景下使用？</li></ol><p>第一个问题回答</p><p>flex 的默认值为 0 1 auto，表示容器剩余空间有多余的时候不扩展，不足的时候收缩，子项的宽度根据自身的宽度来展示</p><p>第二个问题回答</p><p>脑子思考 flex 的值如果是一个值且为数字，说明是 <code>flex-grow:1</code>，当它为数字时，<code>flex-basis</code> 会自动变成 0，所以它具体表示为 <code>flex:1 1 0%</code>，表示容器剩余空间有多余的时候扩展，不足的时候收缩，子项的宽度为 0。它一般适用于充分利用剩余空间，又不侵占其他元素的宽度，例如等分布局</p><p>第三个问题回答</p><p><code>flex:0</code>，表示 <code>flex: 0 1 0%</code>，表示容器剩余空间有多余的时候不扩展，不足的时候收缩，子项的宽度为 0，适用设置在替换元素的父元素上</p><p><code>flex:1</code>，看第二个回答</p><p><code>flex: none</code>，表示 <code>flex: 0 0 auto</code>，表示容器剩余空间有多余的时候不扩展，不足的时候也不收缩，子项的宽度为自身宽度，适用于不换行的内容或者较少的小控件元素上</p><p><code>flex: auto</code>，表示 <code>flex: 1 1 auto</code>，表示容器剩余空间有多余的时候扩展，不足的时候收缩，子项的宽度为自身宽度，适用于基于内容动态适配的布局（例如导航数量文字长度不固定）</p><p><code>flex:initial</code>，表示 <code>flex: 0 1 auto</code>，表示容器剩余空间有多余的时候不扩展，不足的时候收缩，子项的宽度为自身宽度，适用于小控件元素的分布布局，或者某一项内容动态变化的布局</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><p><a href="https://www.zhangxinxu.com/wordpress/2020/10/css-flex-0-1-none/" target="_blank" rel="noreferrer">flex:0 flex:1 flex:none flex:auto 应该在什么场景下使用？</a></p></li><li><p><a href="https://www.zhangxinxu.com/wordpress/2019/12/css-flex-deep/" target="_blank" rel="noreferrer">CSS flex 属性深入理解</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex" target="_blank" rel="noreferrer">MDN Web Docs flex</a></p></li><li><p><a href="https://juejin.cn/post/6844903474774147086" target="_blank" rel="noreferrer">一劳永逸的搞定 flex 布局</a></p></li></ul>`,81),c=[n];function p(d,i,t,r,x,f){return s(),l("div",null,c)}const b=e(o,[["render",p]]);export{h as __pageData,b as default};
