import{_ as e,c as o,o as c,d}from"./app.590c1fbf.js";const m=JSON.parse('{"title":"docker 常见命令","description":"","frontmatter":{},"headers":[{"level":2,"title":"常见命令","slug":"常见命令","link":"#常见命令","children":[]},{"level":2,"title":"Image 镜像","slug":"image-镜像","link":"#image-镜像","children":[]},{"level":2,"title":"Container 容器","slug":"container-容器","link":"#container-容器","children":[]}],"relativePath":"Docker/docker常见命令.md"}'),i={name:"Docker/docker常见命令.md"},l=d(`<h1 id="docker-常见命令" tabindex="-1">docker 常见命令 <a class="header-anchor" href="#docker-常见命令" aria-hidden="true">#</a></h1><h2 id="常见命令" tabindex="-1">常见命令 <a class="header-anchor" href="#常见命令" aria-hidden="true">#</a></h2><ul><li><p><code>docker version</code> ：查看 <code>Docker</code> 客户端和服务端的信息</p></li><li><p><code>docker --version</code> ：只查看版本</p></li><li><p><code>docker images</code> ：查看所有的镜像（<code>image</code>）</p></li><li><p><code>docker images</code> ：等于<code>docker image ls</code></p></li><li><p><code>docker ps</code>：查看现在启动中的容器</p></li><li><p><code>docker ps -a</code> ：查看所有启动过的容器（<code>container</code>）</p></li><li><p><code>docker container ls</code>： 查看所有<strong>正启动</strong>的容器（<code>container</code>）</p></li><li><p><code>docker help</code> ：帮助</p></li><li><p><code>docker info</code>：查看 docker 信息</p></li><li><p><code>docker image help</code>： image 的帮助</p></li><li><p><code>docker container help</code> ：container 的帮助</p></li><li><p><code>docker commit</code> ：生成一个镜像（image）</p></li><li><p><code>docker save express_server:v1.0.0 &gt; express_server.tar</code>：打包镜像</p></li><li><p><code>docker load &lt; express_server.tar</code>：导入镜像</p></li><li><p><code>docker build . -t express_server:V1.0.0</code> 构建容器</p></li><li><p><code>docker exec -it container_id bash</code>：进入容器</p></li><li><p><code>ctrl+p+q</code>：退出容器后端还在运行（前提是进入容器时使用）</p></li><li><p><code>docker logs container_id</code>：查看日志</p></li><li><p><code>docker logs -f container_id</code>：实时查看日志</p></li><li><p><code>docker stop container_id</code>：停止某一容器</p></li><li><p><code>docker restart container_id</code>：重启某一容器</p></li><li><p><code>docker rm container_id</code>：删除某一容器（<code>docker ps -a</code> 就看不到了）</p></li></ul><h2 id="image-镜像" tabindex="-1">Image 镜像 <a class="header-anchor" href="#image-镜像" aria-hidden="true">#</a></h2><ul><li><p>下载镜像： <code>docker pull &lt;image-name&gt;:&lt;tag&gt;</code></p></li><li><p>查看所有镜像：<code>docker images</code></p></li><li><p>删除镜像：<code>docker rmi &lt;image-id&gt;</code></p></li><li><p>上传镜像：<code>docker push &lt;username&gt;/&lt;repository&gt;:&lt;tag&gt;</code>，要先注册 <a href="hub.docker.com">hub.docker.com</a></p></li></ul><blockquote><p>PS：如果 <code>docker images</code> 出现 REPOSITORY 是 <code>&lt;none&gt;</code> 的情况，可以运行 <code>docker image prune</code> 删除</p></blockquote><h2 id="container-容器" tabindex="-1">Container 容器 <a class="header-anchor" href="#container-容器" aria-hidden="true">#</a></h2><ul><li><p>启动容器：<code>docker run -p xxx:xxx -v=hostPath:containerPath -d --name &lt;container --name&gt; &lt;image-name&gt;</code></p><ul><li><p><code>-p</code>：端口映射</p></li><li><p><code>-v</code>：数据卷，文件映射</p></li><li><p><code>-d</code>：后台运行</p></li><li><p><code>--name</code>：定义容器名称</p></li></ul></li><li><p>查看所有容器：<code>docker ps</code>，加 <code>-a</code> 显示隐藏的容器</p></li><li><p>停止容器：<code>docker stop &lt;container-id&gt;</code></p></li><li><p>删除容器：<code>docker rm &lt;container-id&gt;</code>，加 <code>-f</code> 是强制删除</p></li><li><p>查看容器信息（如 IP 地址）： <code>docker inspect &lt;container-id&gt;</code></p></li><li><p>查看容器日志：<code>docker logs &lt;container-id&gt;</code></p></li><li><p>进入容器控制台：</p><ul><li><p><code>docker exec -it &lt;container-id&gt; /bin/sh</code></p></li><li><p><code>docker exec -it 容器名/&lt;container-id&gt; bash</code></p></li></ul></li><li><p>退出容器：</p><ul><li>exit</li></ul></li><li><p>查看容器的虚拟ip地址：</p><ul><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container_name_or_id</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul>`,8),r=[l];function a(n,p,t,s,k,g){return c(),o("div",null,r)}const _=e(i,[["render",a]]);export{m as __pageData,_ as default};
