import{_ as e,c as a,o as s,d as p}from"./app.590c1fbf.js";const u=JSON.parse('{"title":"babel 的使用","description":"","frontmatter":{},"headers":[{"level":3,"title":"plugins(插件)","slug":"plugins-插件","link":"#plugins-插件","children":[]},{"level":3,"title":"presets(预设)","slug":"presets-预设","link":"#presets-预设","children":[]},{"level":3,"title":"Polyfill(代码填充，兼容性补丁)","slug":"polyfill-代码填充-兼容性补丁","link":"#polyfill-代码填充-兼容性补丁","children":[]}],"relativePath":"webpack/babel/babel的使用.md"}'),n={name:"webpack/babel/babel的使用.md"},r=p(`<h1 id="babel-的使用" tabindex="-1">babel 的使用 <a class="header-anchor" href="#babel-的使用" aria-hidden="true">#</a></h1><p>什么是 babel？</p><p>用最新的标准编写的 javascript 代码向下编译成可以砸今天随处可用的版本</p><p>babel-core</p><p>核心包，把 js 代码分析为 ast</p><p>babel-node</p><h3 id="plugins-插件" tabindex="-1">plugins(插件) <a class="header-anchor" href="#plugins-插件" aria-hidden="true">#</a></h3><p>babel 插件</p><h3 id="presets-预设" tabindex="-1">presets(预设) <a class="header-anchor" href="#presets-预设" aria-hidden="true">#</a></h3><p>可以理解为 plugins 的集合，不同的 presets 包含不同的 plugins</p><p>比如 @babel-presets-react 包含了写 react 需要用到的 @babel/plugin-syntax-jsx, @babel/plugins-transform-react-jsx, @babel/plugins-transform-react-display-name 等</p><p>而最为常用的，也是被官方推荐的，是@babel/presets-env。默认情况下，所有已被纳入规范的语法（ES2015,ES2016,ES2017,ES2018,Modules）所需要使用的 plugins 都包含在 env 这个 presets 中。</p><h3 id="polyfill-代码填充-兼容性补丁" tabindex="-1">Polyfill(代码填充，兼容性补丁) <a class="header-anchor" href="#polyfill-代码填充-兼容性补丁" aria-hidden="true">#</a></h3><p>babel 插件专注于对语法做转换，而有些浏览器不识别某些 api，最简答的方法就是用浏览器能识别的方法为 Array 写一个静态方法 isArray</p><p>ps:某些浏览器没有 isArray api，polyfill 用浏览器能识别的方法为 Array 写一个 isArray 函数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">toString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Array</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>webpack</p><p>一个问题</p><p>如何使用在 react-route 中使用 require(&quot;./app.js&quot;)</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> &lt;Route path=&quot;/app&quot; component={require(&quot;./app.js&quot;)}/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我知道肯定用了 babel 的一个插件</p><p>但是试了好多，都不对</p><h1 id="treeshaking" tabindex="-1">treeShaking <a class="header-anchor" href="#treeshaking" aria-hidden="true">#</a></h1><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-merge" target="_blank" rel="noreferrer">webpack-merge</a>: 用于合并 webpack 的公共配置和环境配置(合并 webpack.config.js 和 webpack.development.js 或者 webpack.production.js)</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fyargs-parser" target="_blank" rel="noreferrer">yargs-parser</a>: 用于将我们的 npm scripts 中的命令行参数转换成键值对的形式如 --mode development 会被解析成键值对的形式 mode: &quot;development&quot;，便于在配置文件中获取参数</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fclean-webpack-plugin" target="_blank" rel="noreferrer">clean-webpack-plugin</a>: 用于清除本地文件，在进行生产环境打包的时候，如果不清除 dist 文件夹，那么每次打包都会生成不同的 js 文件或者 css 文件堆积在文件夹中，因为每次打包都会生成不同的 hash 值导致每次打包生成的文件名与上次打包不一样不会覆盖上次打包留下来的文件</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fprogress-bar-webpack-plugin" target="_blank" rel="noreferrer">progress-bar-webpack-plugin</a>: 打包编译的时候以进度条的形式反馈打包进度</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-build-notifier" target="_blank" rel="noreferrer">webpack-build-notifier</a>: 当你打包之后切换到别的页面的时候，完成时会在本地系统弹出一个提示框告知你打包结果(成功或失败或警告)</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin" target="_blank" rel="noreferrer">html-webpack-plugin</a>: 自动生成 html,并默认将打包生成的 js、css 引入到 html 文件中</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmini-css-extract-plugin" target="_blank" rel="noreferrer">mini-css-extract-plugin</a>: webpack 打包样式文件中的默认会把样式文件代码打包到 bundle.js 中，<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmini-css-extract-plugin" target="_blank" rel="noreferrer">mini-css-extract-plugin</a>这个插件可以将样式文件从 bundle.js 抽离出来一个文件，并且支持 chunk css</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fadd-asset-html-webpack-plugin" target="_blank" rel="noreferrer">add-asset-html-webpack-plugin</a>: 从命名可以看出，它的作用是可以将静态资源 css 或者 js 引入到<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin" target="_blank" rel="noreferrer">html-webpack-plugin</a>生成的 html 文件中</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fuglifyjs-webpack-plugin" target="_blank" rel="noreferrer">uglifyjs-webpack-plugin</a>: 代码丑化，用于 js 压缩(可以调用系统的线程进行<strong>多线程压缩</strong>，优化 webpack 的<strong>压缩速度</strong>)</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Foptimize-css-assets-webpack-plugin" target="_blank" rel="noreferrer">optimize-css-assets-webpack-plugin</a>: css 压缩，主要使用 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fcssnano%2Fcssnano" target="_blank" rel="noreferrer">cssnano</a> 压缩器(webpack4 的执行环境内置了 cssnano，所以不用安装)</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ffriendly-errors-webpack-plugin" target="_blank" rel="noreferrer">friendly-errors-webpack-plugin</a>: 能够更好在终端看到 webapck 运行的警告和错误</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhappypack" target="_blank" rel="noreferrer">happypack</a>: 多线程编译，加快编译速度(加快 loader 的编译速度)，注意，thread-loader 不可以和 mini-css-extract-plugin 结合使用</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fsplit-chunks-plugin%2F%23src%2Fcomponents%2FSidebar%2FSidebar.jsx" target="_blank" rel="noreferrer">splitChunks</a>: CommonChunkPlugin 的后世，用于对 bundle.js 进行 chunk 切割(webpack 的内置插件)</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fdll-plugin%2F%23src%2Fcomponents%2FSidebar%2FSidebar.jsx" target="_blank" rel="noreferrer">DllPlugin</a>: 将模块预先编译，它会在第一次编译的时候将配置好的需要预先编译的模块编译在缓存中，第二次编译的时候，解析到这些模块就直接使用缓存，而不是去编译这些模块(webpack 的内置插件)</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fdll-plugin%2F%23dllreferenceplugin" target="_blank" rel="noreferrer">DllReferencePlugin</a>: 将预先编译好的模块关联到当前编译中，当 webpack 解析到这些模块时，会直接使用预先编译好的模块(webpack 的内置插件)</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fhot-module-replacement-plugin%2F%23src%2Fcomponents%2FSidebar%2FSidebar.jsx" target="_blank" rel="noreferrer">HotModuleReplacementPlugin</a>: 实现局部热加载(刷新)，区别与在 webpack-dev-server 的全局刷新(webpack 的内置插件)</p>`,39),l=[r];function t(i,o,c,F,b,g){return s(),a("div",null,l)}const k=e(n,[["render",t]]);export{u as __pageData,k as default};
