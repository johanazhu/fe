import{_ as s,c as n,o as a,d as l}from"./app.590c1fbf.js";const d=JSON.parse('{"title":"前端算法与数据结构面试笔记","description":"","frontmatter":{},"headers":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"快速上手——从 0 到 1 掌握面试需要的数据结构（一）","slug":"快速上手——从-0-到-1-掌握面试需要的数据结构-一","link":"#快速上手——从-0-到-1-掌握面试需要的数据结构-一","children":[]},{"level":3,"title":"快速上手——从 0 到 1 掌握面试需要的数据结构（二 ）","slug":"快速上手——从-0-到-1-掌握面试需要的数据结构-二","link":"#快速上手——从-0-到-1-掌握面试需要的数据结构-二","children":[]},{"level":3,"title":"快速上手——从 0 到 1 掌握算法面试需要的数据结构（三）","slug":"快速上手——从-0-到-1-掌握算法面试需要的数据结构-三","link":"#快速上手——从-0-到-1-掌握算法面试需要的数据结构-三","children":[]},{"level":3,"title":"递归初相见——二叉树递归遍历的三种姿势","slug":"递归初相见——二叉树递归遍历的三种姿势","link":"#递归初相见——二叉树递归遍历的三种姿势","children":[]}],"relativePath":"Read/course/前端算法与数据结构面试：底层逻辑解读与大厂真题训练笔记.md"}'),p={name:"Read/course/前端算法与数据结构面试：底层逻辑解读与大厂真题训练笔记.md"},e=l(`<h1 id="前端算法与数据结构面试笔记" tabindex="-1">前端算法与数据结构面试笔记 <a class="header-anchor" href="#前端算法与数据结构面试笔记" aria-hidden="true">#</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h3><p>学习观念：<strong>前端工程师如果不是为了面试，那么不建议花大力气折腾算法（尤其是在业余时间本身非常有限的情况下），你应该考虑把更多的时间用来做工程</strong>。</p><p><strong>所谓工程能力，本质是“解决问题的能力”，无论是硬编码实力、还是架构思想，其本质都是为了解决问题这个终极目标而服务</strong> 。</p><h3 id="快速上手——从-0-到-1-掌握面试需要的数据结构-一" tabindex="-1">快速上手——从 0 到 1 掌握面试需要的数据结构（一） <a class="header-anchor" href="#快速上手——从-0-到-1-掌握面试需要的数据结构-一" aria-hidden="true">#</a></h3><p>数据结构层面需掌握</p><ul><li>数组</li><li>栈</li><li>队列</li><li>链表</li><li>树（主要讲二叉树）</li></ul><h3 id="快速上手——从-0-到-1-掌握面试需要的数据结构-二" tabindex="-1">快速上手——从 0 到 1 掌握面试需要的数据结构（二 ） <a class="header-anchor" href="#快速上手——从-0-到-1-掌握面试需要的数据结构-二" aria-hidden="true">#</a></h3><p>在涉及链表删除操作的题目中，重点不是定位目标结点，而是<strong>定位目标结点的前驱结点</strong></p><p>JS 数组未必是真正的数组</p><p>何谓“真正的数组”？在各大教材（包括百科词条）对数组的定义中，都有一个“存储在连续的内存空间里”这样的必要条件。</p><p>链表的插入/删除效率较高，而访问效率较低；数组的访问效率较高，而插入效率较低</p><h3 id="快速上手——从-0-到-1-掌握算法面试需要的数据结构-三" tabindex="-1">快速上手——从 0 到 1 掌握算法面试需要的数据结构（三） <a class="header-anchor" href="#快速上手——从-0-到-1-掌握算法面试需要的数据结构-三" aria-hidden="true">#</a></h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><h4 id="理解二叉树结构" tabindex="-1">理解二叉树结构 <a class="header-anchor" href="#理解二叉树结构" aria-hidden="true">#</a></h4><p>二叉树是指满足以下要求的树：</p><ul><li>它可以没有根结点，作为一棵空树存在</li><li>如果它不是空树，那么<strong>必须由根结点、左子树和右子树组成，且左右子树都是二叉树</strong>。如下图：</li></ul><p>二叉树构造函数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 二叉树结点的构造函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TreeNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="递归初相见——二叉树递归遍历的三种姿势" tabindex="-1">递归初相见——二叉树递归遍历的三种姿势 <a class="header-anchor" href="#递归初相见——二叉树递归遍历的三种姿势" aria-hidden="true">#</a></h3><p>遍历方式有以下四种：</p><ul><li>先序遍历</li><li>中序遍历</li><li>后序遍历</li><li>层次遍历</li></ul><p>那么遍历的可能顺序也不过三种：</p><ul><li>根结点 -&gt; 左子树 -&gt; 右子树 先序遍历</li><li>左子树 -&gt; 根结点 -&gt; 右子树 中序遍历</li><li>左子树 -&gt; 右子树 -&gt; 根结点 后序遍历</li></ul><p>先序遍历的编码实现：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 所有遍历函数的入参都是树的根节点对象</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">preorder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归边界，root 为空</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 输出当前遍历的节点值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">当前遍历的结点值是：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归遍历左子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">preorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归遍历右子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">preorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>各位现在完全可以再回过头来看一下我们前面示例的这棵二叉树：</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/6/1714ec60340dc2db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： A</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： B</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： D</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： E</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： C</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： F</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="中序遍历" tabindex="-1">中序遍历： <a class="header-anchor" href="#中序遍历" aria-hidden="true">#</a></h4><p>左子树 -&gt; 根结点 -&gt; 右子树：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 所有遍历函数的入参都是树的根结点对象</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inorder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归边界，root 为空</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归遍历左子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">inorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 输出当前遍历的结点值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">当前遍历的结点值是：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归遍历右子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">inorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： D</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： B</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： E</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： A</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： C</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： F</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="后序遍历" tabindex="-1">后序遍历 <a class="header-anchor" href="#后序遍历" aria-hidden="true">#</a></h4><p>左子树 -&gt; 右子树 -&gt; 根结点</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">postorder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归边界， root 为空</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归遍历左子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">postorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归遍历右子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">postorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 输出当前遍历的结点值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">当前遍历的结点值是：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>输出结果：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： D</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： E</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： B</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： F</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： C</span></span>
<span class="line"><span style="color:#A6ACCD;">当前遍历的结点值是： A</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,38),o=[e];function r(t,c,i,y,F,D){return a(),n("div",null,o)}const A=s(p,[["render",r]]);export{d as __pageData,A as default};
