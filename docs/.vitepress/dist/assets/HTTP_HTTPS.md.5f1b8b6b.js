import{_ as e,c as a,o as t,d as l}from"./app.590c1fbf.js";const _=JSON.parse('{"title":"了解 HTTPS","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是 HTTPS","slug":"什么是-https","link":"#什么是-https","children":[]},{"level":2,"title":"TLS/SSL","slug":"tls-ssl","link":"#tls-ssl","children":[]},{"level":2,"title":"非对称加密与对称加密","slug":"非对称加密与对称加密","link":"#非对称加密与对称加密","children":[]},{"level":2,"title":"TLS/SSL 工作原理","slug":"tls-ssl-工作原理","link":"#tls-ssl-工作原理","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"HTTP/HTTPS.md"}'),s={name:"HTTP/HTTPS.md"},i=l('<h1 id="了解-https" tabindex="-1">了解 HTTPS <a class="header-anchor" href="#了解-https" aria-hidden="true">#</a></h1><h2 id="什么是-https" tabindex="-1">什么是 HTTPS <a class="header-anchor" href="#什么是-https" aria-hidden="true">#</a></h2><p>简单来说，是在 HTTP 协议的基础上加一道通道。原因是 HTTP 的通信是明文、不安全的，很可能在你请求的时候被人破解，在你的浏览的页面中加入广告等黑客行为，所以就有人提出了安全协议，即安全版的 HTTP，是使用了 TLS/SSL 加密的 HTTP 协议</p><p><img src="https://s2.loli.net/2022/04/01/IQudTsf82ymHr3B.png" alt="HTTP对比HTTPS"></p><p>如图所示，所谓的 HTTPS 是在应用层加上 TLS/SSL，按照 TCP/IP 分层模型，HTTPS 中的 HTTP 是在 TLS/SSL 的基础上运行，TLS/SSL 负责安全部分，那什么是 TLS/SSL 呢？</p><h2 id="tls-ssl" tabindex="-1">TLS/SSL <a class="header-anchor" href="#tls-ssl" aria-hidden="true">#</a></h2><p>TLS/SSL 全称安全传输协议 Transport Layer Security，是介于 TCP 和 HTTP 之间的一层安全协议</p><p><img src="https://s2.loli.net/2022/04/09/BuHjzFhLolpCfnZ.png" alt="web-https03"></p><blockquote><p>SSL 是 TLS 的前身，SSL2 和 SSL3 分别在 2011 年和 2015 年被废弃，TLS 可以说是 SSL 的新版本</p></blockquote><p>TLS/SSL 主要依赖于三类基本算法：散列函数、Hash、对称加密和非对称加密，其利用非对称加密实现身份认知和密钥协商，对称加密算法采用协商的密码对数据加密，基于散列函数验证信息的完整性</p><p>对称加密</p><ul><li>AES</li><li>ChaCha</li></ul><p>非对称加密</p><ul><li>RSA</li><li>DH</li></ul><p>摘要算法：SHA-2</p><h2 id="非对称加密与对称加密" tabindex="-1">非对称加密与对称加密 <a class="header-anchor" href="#非对称加密与对称加密" aria-hidden="true">#</a></h2><p>对称加密很好理解，就是指加密和解密时使用的密钥都是同一个 ，是对称的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性。</p><p>对称加密看上去好像完美地实现了机密性，但其中有一个很大的问题：如何把密钥安全地传递给对方，术语叫密钥交换。</p><p>因为在对称加密算法中只要持有密钥就可以解密。如果你和网站约定的密钥在传递途中被黑客窃取，那他就可以在之后随意解密收发的数据，通信过程也就没有机密性可言了。</p><p>所以，就出现了非对称加密（也叫公钥加密算法）。</p><p>它有两个密钥，一个叫公钥（public key），一个叫私钥（private key）。两个密钥是不同的（不对称），公钥可以公开给任何人使用，而私钥必须严格保密。</p><p>公钥和私钥有个特别的单向性，虽然都可以用来加密解密，但公钥加密后只能用私钥解密，反过来，私钥加密后也只能用公钥解密 。</p><p>非对称加密可以解决密钥交换的问题。网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文。</p><h2 id="tls-ssl-工作原理" tabindex="-1">TLS/SSL 工作原理 <a class="header-anchor" href="#tls-ssl-工作原理" aria-hidden="true">#</a></h2><p>为什么要三种算法结合，非对称加密所耗费时间过长，而对称加密又会不安全，所以结合两种</p><ul><li>客户端使用非对称加密与服务器进行通信拿到公钥信息（数字证书），实现身份验证</li><li>由于服务器端私钥加密复杂，耗时较长，所以在客户端身份验证成功以后，会协商对称假面使用的密钥</li><li>然后对称加密算法采用协商密钥对信息以及信息照耀进行加密通信，不同的阶段采用的对称密码不同，而从可以保证可能通信双方获取</li></ul><p>HTTPS 连接大致上可以划分为两个部分，第一个是建立连接时的 <strong>非对称加密握手</strong> ，第二个是握手后的 <strong>对称加密报文传输</strong></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651234217&amp;idx=1&amp;sn=0c97f58d3dc8b21caabcd1c51e81e1b2&amp;chksm=bd49462d8a3ecf3bc5600761b271e3975bd57b503577f4a848c4e7e8c9d34e6dd11279b0a7ea&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1570834371848&amp;sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd" target="_blank" rel="noreferrer">再谈 HTTPS</a></li><li><a href="https://limeii.github.io/2018/11/deep-understanding-https/" target="_blank" rel="noreferrer">深入理解 HTTPS</a></li></ul>',29),r=[i];function p(h,d,T,n,S,c){return t(),a("div",null,r)}const u=e(s,[["render",p]]);export{_ as __pageData,u as default};
