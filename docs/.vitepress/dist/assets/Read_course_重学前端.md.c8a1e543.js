import{_ as s,c as a,o as n,d as l}from"./app.590c1fbf.js";const A=JSON.parse('{"title":"重学前端学习","description":"","frontmatter":{},"headers":[{"level":3,"title":"建立知识架构","slug":"建立知识架构","link":"#建立知识架构","children":[]},{"level":3,"title":"05-JavaScript 类型：关于类型，有哪些你不知道的细节","slug":"_05-javascript-类型-关于类型-有哪些你不知道的细节","link":"#_05-javascript-类型-关于类型-有哪些你不知道的细节","children":[]},{"level":3,"title":"Symbol","slug":"symbol","link":"#symbol","children":[]},{"level":3,"title":"Object","slug":"object","link":"#object","children":[]},{"level":3,"title":"JavaScipt 对象的特征","slug":"javascipt-对象的特征","link":"#javascipt-对象的特征","children":[]}],"relativePath":"Read/course/重学前端.md"}'),e={name:"Read/course/重学前端.md"},p=l(`<h1 id="重学前端学习" tabindex="-1">重学前端学习 <a class="header-anchor" href="#重学前端学习" aria-hidden="true">#</a></h1><h3 id="建立知识架构" tabindex="-1">建立知识架构 <a class="header-anchor" href="#建立知识架构" aria-hidden="true">#</a></h3><p>前端知识结构</p><ul><li>文法 <ul><li>词法</li><li>语法</li></ul></li><li>语义</li><li>运行时 <ul><li>类型</li><li>执行过程</li></ul></li></ul><p>“用规定的文法，去表达特定语义，最终操作运行时”</p><p><strong>程序 = 算法 + 数据结构</strong></p><p><strong>对运行时来说，类型就是数据结构，执行过程就是算法</strong></p><p>词法中有各种直接量、关键字、运算符，语法和语义则是表达式、语句、函数、对象、模块，类型则包含了对象、数字、字符串等......</p><h3 id="_05-javascript-类型-关于类型-有哪些你不知道的细节" tabindex="-1">05-JavaScript 类型：关于类型，有哪些你不知道的细节 <a class="header-anchor" href="#_05-javascript-类型-关于类型-有哪些你不知道的细节" aria-hidden="true">#</a></h3><p>问题：</p><ul><li>为什么有的编程规范要求用 void 0 代替 undefined？</li><li>字符串有最大长度吗？</li><li>0.1 + 0.2 不是等于 0.3 么？为什么 JavaScript 里不是这样的？</li><li>ES6 新加入的 Symbol 是个什么东西？</li><li>为什么给对象添加的方法能用在基本类型上？</li></ul><blockquote><p>运行时类型是代码实际执行过程中我们用到的类型。所有的类型数据都会属于 7 个类型之一。从变量、参数、返回值到表达式中间结果，任何 JavaScript 代码运行过程中产生的数据，都具有运行时类型</p></blockquote><p>1.为什么有的编程规范要求用 void 0 代替 undefined？</p><p>Undefined 类型表示为定义，它的类型只有一个值，就是 undefined。任何比那里在赋值前是 Undefined 类型，值为 undefined，一般我们可以用全局变量 undefined（就是名为 undefined 的这个变量）来表示这个值，或者 void 运算来把任一表达式变成 undefined 值。</p><p>但是 javascript 中的 undefined 是一个变量，而并非一个关键字，这是 javascript 语言公认的设计失误之一，所以为了避免无意被篡改，建议 void(0)来获取 undefined 值</p><p>undefined 和 null 有一定的表意差别，null 表示的是：<strong>定义了但是为空</strong> 。所以实际编程时，一般把变量赋值为 undefined，这样可以保证所以值为 undefined 的遍历，都是从未赋值的自然状态</p><p>Null 类型也是一个值，就是 null，它的语义表示控制，与 undefined 不同，，null 是 JavaScript 关键字，所有在任何代码中，你都可以放心用 null 关键字来获取 null 值</p><p>2.我们来看看字符串是否有最大长度。</p><p>2^53 - 1</p><p>JavaScript 中的 Number 类型有 18437736874454810627(即 2^64-2^53+3) 个值</p><p>3.为什么在 JavaScript 中，0.1+0.2 不能=0.3：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loh</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因为浮点数运算的精度问题导致左右结果相差微小的值</p><p>一般用 JavaScript 提供的最小精度值</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">abs</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">EPSILON)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-hidden="true">#</a></h3><p>symbol 是 ES6 中引入的新类型，它是一切非字符串的对象 key 的集合，在 ES6 规范中，整个对象系统被用 Symbol 重塑</p><h3 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-hidden="true">#</a></h3><p>Object 是 JavaScript 中最复杂的类型，也是 JavaScript 的核心机制之一。Object 表示对象的意思，它是一切有形和无形物体的总称</p><h3 id="javascipt-对象的特征" tabindex="-1">JavaScipt 对象的特征 <a class="header-anchor" href="#javascipt-对象的特征" aria-hidden="true">#</a></h3><ul><li>对象具有唯一标识性：即使完全相同的两个对象，也并非同一对象</li><li>对象有状态：对象具有状态，同一对象可能处于不同状态之下</li><li>对象具有行为：即对象的状态，因为它的行为产生变迁</li></ul><p>对象具有唯一性</p><p>一般来说，各种语言的对象唯一标识性都是用内存地址来体现的，对象具有唯一标识的内存地址，所以具有唯一的标识</p><p>在 JavaScript 中，对象的状态和行为其实都被抽象为了属性</p><p><strong>JavaScript 中对象具有的特定是：对象具有高度的动态性</strong></p><p>动态语言</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1, 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>能在对象定义后，再往对象上加状态和行为，Java 则不行，因为他是静态的</p><h4 id="javascript-对象的两类属性" tabindex="-1">JavaScript 对象的两类属性 <a class="header-anchor" href="#javascript-对象的两类属性" aria-hidden="true">#</a></h4>`,39),o=[p];function t(r,c,i,d,y,C){return n(),a("div",null,o)}const u=s(e,[["render",t]]);export{A as __pageData,u as default};
