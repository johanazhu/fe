import{_ as s,c as n,o as a,d as e}from"./app.590c1fbf.js";const h=JSON.parse('{"title":"页面渲染层面","description":"","frontmatter":{},"headers":[{"level":3,"title":"defer","slug":"defer","link":"#defer","children":[]},{"level":3,"title":"async","slug":"async","link":"#async","children":[]},{"level":3,"title":"动态脚本","slug":"动态脚本","link":"#动态脚本","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"Performance/页面渲染层面.md"}'),l={name:"Performance/页面渲染层面.md"},p=e(`<h1 id="页面渲染层面" tabindex="-1">页面渲染层面 <a class="header-anchor" href="#页面渲染层面" aria-hidden="true">#</a></h1><p>渲染时机相关</p><p>懒加载</p><p>懒执行</p><p>渐进式渲染</p><p>html dom 树，css cssom 树 defer async 等等 遇到 js，preload 以及 prefetch 并发加载 重绘和回流 浏览器缓存</p><p>页面渲染阶段</p><ul><li>css 在上、js 在下</li><li>加载 css 推荐用 link 少用 @import <ul><li>link 属于 html，@import 属于 css，需写在样式表开头</li><li>@import 是 css2.1 才出现的概念</li><li>当 html 文件被加载时，link 引用的文件会同时被加载，而@import 引用的文件则会等页面全部下载完毕再被加载</li></ul></li><li>不重要的外置引入的 js 使用 defer 或者 async 属性异步加载</li></ul><p><code>script</code> 特性（attribute）可以为我们解决延迟问题：<code>defer</code> 和 <code>async</code></p><h3 id="defer" tabindex="-1">defer <a class="header-anchor" href="#defer" aria-hidden="true">#</a></h3><p><code>defer</code> 特性告诉浏览器不要等待脚本。相反，浏览器将继续处理 HTML，构建 DOM。脚本会“在后台”下载，然后等 DOM 构建完成后，脚本才会执行</p><p>换句话说：</p><ul><li>具有 <code>defer</code> 特性的脚本不会阻塞页面</li><li>具有 <code>defer</code> 特性的脚本总是要等到 DOM 解析完毕，但在 <code>DOMContentLoaded</code> 事件之前执行</li></ul><p>下面这个示例演示了上面所说的第二句话：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...content before scripts...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOM ready after defer!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">defer</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://javascript.info/article/script-async-defer/long.js?speed=1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...content after scripts...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol><li>页面内容立即现实</li><li><code>DOMContentLoaded</code> 事件处理程序等待具有<code>defer</code> 特性的脚本执行完成。它仅在脚本下载且执行结束后才会被触发</li></ol><p><strong>具有 <code>defer</code> 特性的脚本保持其相对顺序，就像常规脚本一样。</strong></p><p><strong><code>defer</code> 特性仅适用于外部脚本</strong></p><p>如果 <code>&lt;script&gt;</code> 脚本没有 <code>src</code>，则会忽略 <code>defer</code> 特性。</p><h3 id="async" tabindex="-1">async <a class="header-anchor" href="#async" aria-hidden="true">#</a></h3><p><code>async</code> 特性与 <code>defer</code> 有些类似。它也能够让脚本不阻塞页面，但是，在行为上二者有着重要的区别</p><p><code>async</code> 特性意味着脚本是完成独立的</p><ul><li>浏览器不会因 <code>async </code> 脚本而阻塞（与 <code>defer</code> 类似）</li><li>其他脚本不会等待 <code>async</code> 脚本加载完成，同样，<code>async</code> 脚本也不会等待其他脚本</li><li><code>DOMContentLoaded</code> 可能会发生在异步脚本之前（如果异步脚本在页面完成后才加载完成）</li><li><code>DOMContentLoaded</code> 也可能发生在异步脚本之后（如果异步脚本很短，或者是从 HTTP 缓存中加载的）</li></ul><p>换句话说，<code>async</code> 脚本会在后台加载，并在加载就绪时运行。DOM 和其他脚本不会等待它们，它们也不会等待其他的东西。<code>async</code> 脚本就是一个会在加载完成时执行的完全独立的脚本</p><h3 id="动态脚本" tabindex="-1">动态脚本 <a class="header-anchor" href="#动态脚本" aria-hidden="true">#</a></h3><p>我们可以使用 JavaScript 动态地创建一个脚本，并将其插入（append）到文档（document）中：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> script </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/article/script-async-defer/long.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(script)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// (*)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>默认情况下，动态脚本的行为是“异步”的。</strong></p><p>也就是说：</p><ul><li>它们不会等待任何东西，也没有上面东西会等它们</li><li>先加载完成的脚本先执行（“加载优先”顺序）</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h3><p><code>async</code> 和 <code>defer</code> 有一个共同点：加载这样的脚本都不会阻塞页面的渲染。因此，用户可以立即圆度并了解页面内容。但是，它们之前也存在一些本质的区别：</p><table><thead><tr><th></th><th>顺序</th><th>DOMContnetLoaded</th></tr></thead><tbody><tr><td>async</td><td>加载优先顺序。脚本在文档中的顺序不重要——先加载完成的先执行</td><td>不相关。可能在文档加载完成前加载并执行完毕。如果脚本很小或者来自缓存，同时文档足够长，就会发生这种情况</td></tr><tr><td>defer</td><td>文档顺序（它们在文档中的顺序）</td><td>在文档加载和解析完成之后（如果需要，则会等待），即在<code>DOMContentLoaded</code> 之前执行</td></tr></tbody></table><p>在实际开发中，<code>defer</code> 用于需要整个 DOM 的脚本，脚本的相对执行顺序很重要的时候使用</p><p><code>async</code> 用于独立脚本，例如计数器或广告，这些脚本的相对执行顺序无关紧要</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://zh.javascript.info/script-async-defer" target="_blank" rel="noreferrer">脚本：async，defer</a></li></ul>`,37),o=[p];function c(t,r,d,i,D,y){return a(),n("div",null,o)}const u=s(l,[["render",c]]);export{h as __pageData,u as default};
