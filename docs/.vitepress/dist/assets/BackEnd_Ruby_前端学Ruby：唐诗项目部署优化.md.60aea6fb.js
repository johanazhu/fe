import{_ as e,c as a,o as t,d as r}from"./app.590c1fbf.js";const b=JSON.parse('{"title":"前端学 Ruby：唐诗项目部署优化","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"正文","slug":"正文","link":"#正文","children":[]}],"relativePath":"BackEnd/Ruby/前端学Ruby：唐诗项目部署优化.md"}'),_={name:"BackEnd/Ruby/前端学Ruby：唐诗项目部署优化.md"},d=r('<h1 id="前端学-ruby-唐诗项目部署优化" tabindex="-1">前端学 Ruby：唐诗项目部署优化 <a class="header-anchor" href="#前端学-ruby-唐诗项目部署优化" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>本篇文章和 Ruby 关系不大，而是涉及到部署问题</p><p>前文花了不少时间来从零到部署唐诗项目，当时因为篇幅问题留下了不少的坑</p><p>例如可以采用 docker-compose 来代替两个容器互相访问、使用 shell 命令在本地部署，这篇就是对前文的补充</p><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-hidden="true">#</a></h2>',6),n=[d];function c(s,i,o,h,l,u){return t(),a("div",null,n)}const f=e(_,[["render",c]]);export{b as __pageData,f as default};
