import{_ as s,c as a,o as n,d as l}from"./app.590c1fbf.js";const u=JSON.parse('{"title":"Preact 核心原理详解笔记","description":"","frontmatter":{},"headers":[{"level":2,"title":"Preact 和 React 的区别有哪些？","slug":"preact-和-react-的区别有哪些","link":"#preact-和-react-的区别有哪些","children":[{"level":3,"title":"事件系统","slug":"事件系统","link":"#事件系统","children":[]},{"level":3,"title":"更符合 DOM 规范的描述","slug":"更符合-dom-规范的描述","link":"#更符合-dom-规范的描述","children":[]}]},{"level":2,"title":"Preact 是怎么工作的","slug":"preact-是怎么工作的","link":"#preact-是怎么工作的","children":[{"level":3,"title":"JSX","slug":"jsx","link":"#jsx","children":[]},{"level":3,"title":"Virtual DOM","slug":"virtual-dom","link":"#virtual-dom","children":[]},{"level":3,"title":"Diff 算法","slug":"diff-算法","link":"#diff-算法","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"React/手写/Preact.md"}'),e={name:"React/手写/Preact.md"},p=l(`<h1 id="preact-核心原理详解笔记" tabindex="-1">Preact 核心原理详解笔记 <a class="header-anchor" href="#preact-核心原理详解笔记" aria-hidden="true">#</a></h1><p>一：Preact 是什么</p><p>二：Preact 和 React 的区别有哪些？</p><p>三：Preact 是怎么工作的</p><p>四：结合实际组件了解整体渲染流程</p><p>五：Preact Hooks</p><p>Preact 是什么？</p><p>Preact 和 React 的区别</p><p>Preact 是怎么工作的</p><ul><li>JSX</li><li>Virtual Dom</li><li>Preact 的 Virtual DOM Diff 算法</li></ul><p>Preact Hooks 的实现</p><p>一个组件的生命周期</p><h1 id="preact-是什么" tabindex="-1">Preact 是什么？ <a class="header-anchor" href="#preact-是什么" aria-hidden="true">#</a></h1><p>简单而言，Preact 是 React 的 3KB 轻量级替代方案，它拥有着和 React 一样的 API。有同学或许会问，Preact 中的 P 的含义是什么，根据 Preact 的作者表述的是 performance 的含义，这也是 Preact 框架的目标之一。</p><h2 id="preact-和-react-的区别有哪些" tabindex="-1">Preact 和 React 的区别有哪些？ <a class="header-anchor" href="#preact-和-react-的区别有哪些" aria-hidden="true">#</a></h2><p>区别在于</p><ul><li>事件系统</li><li>更符合 DOM 规范的描述</li></ul><h3 id="事件系统" tabindex="-1">事件系统 <a class="header-anchor" href="#事件系统" aria-hidden="true">#</a></h3><p>一个例子</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// React</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Preact</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onInput</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 React 内部，其自身实现了一套事件合成系统，所以我们一般在 React 的表单组件中使用的都是 onChange 方法来进行组件的更新，而在 Preact 内部，没有事件合成系统，它直接使用的是由浏览器原生提供的事件系统，这就是它提交更小的直接原因之一</p><h3 id="更符合-dom-规范的描述" tabindex="-1">更符合 DOM 规范的描述 <a class="header-anchor" href="#更符合-dom-规范的描述" aria-hidden="true">#</a></h3><p>在 React 中我们想描述一个 DOM 的类名，必须要使用 className, 而在 Preact 中，不仅可以使用 className 来描述，也可以直接使用 class 来描述 DOM 的类名，这也使得 Preact 更接近原生 DOM 规范的描述</p><h2 id="preact-是怎么工作的" tabindex="-1">Preact 是怎么工作的 <a class="header-anchor" href="#preact-是怎么工作的" aria-hidden="true">#</a></h2><p>主要由三部分组成 JSX、Virtual DOM、Diff 算法</p><h3 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-hidden="true">#</a></h3><p>如何在 JS 中描述 DOM 结构，通过浏览器的操作 DOM API 、封装成一个工厂函数来进行接受一定的输入，输出就是相对的 DOM</p><p>用结构式的写法写法不变，</p><p>演变后用 JSX 语法，经过 babel 或者其他的插件转换为上诉的函数式描述，然后在经过一系列处理，变成我们所熟悉的原生 DOM 结构，这就是 JSX 产生的本质原因</p><p>综合来看，其实 JSX 的本质就是 JS 的扩展，它允许你用类似 HTML/XML 的结构，进而编译成类似如下的一个函数调用</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(nodeName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> attributes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">children)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>JSX 转换到函数调用这个阶段是由 React 团队提供，后面因为 babel 做的更好，更强大，就逐渐演变成了 @babel/plugin-transform-react-JSX 这个核心插件，所以上文所提及的 h 函数，正式因为在 Preact 中， JSX 的预发会通过 babel 这个插件转换成一个名称为 h 的工厂函数，类似于在 React 中的 React.createElement 的作用，所以我们才需要去声明 h 函数，虽然我们在实际开发环境上用不到，但是它的作用就体现在 babel 转换后的代码中</p><h3 id="virtual-dom" tabindex="-1">Virtual DOM <a class="header-anchor" href="#virtual-dom" aria-hidden="true">#</a></h3><p>我们写 JSX，通过 babel 的@babel/plugin-transform-react-JSX 转换为 h 函数，即</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    Hello!</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">br</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>babel 转换</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">br</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>而 h 是个函数，输入就有输出，输出的即使一个特殊类型的数据结构，它就是 Virtual DOM</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">nodeName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">attritubes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">children</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">nodeName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">br</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Virtual DOM 本质上就是一种用来描述 DOM 结构的数据结构，所以 h 函数的输出其实就是我们常说的 Virtual DOM</p><p>不管在 React 中还是在 Preact 中，最核心的都是 Virtual DOM 的 Diff 算法，怎么把最新的数据所驱动的 DOM 结构表现在页面当中，就需要 Diff 算法</p><h3 id="diff-算法" tabindex="-1">Diff 算法 <a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a></h3><p>在 Preact 中，Virtual DOM 的 Diff 算法可以拆解成三块</p><ul><li>Diff children</li><li>Diff 这里的 type 指的是组件的类型，主要分为 component、Fragment 和 DOM node 三种</li><li>Diff props</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzU0ODk0MDg4Nw==&amp;mid=2247483951&amp;idx=1&amp;sn=b4fbae59bd89c442c7c8fdaa97d0eca7&amp;chksm=fbb63f17ccc1b60187019619a7ae0c8eee9e9a6a0ac12d02bb5d882b97f0426eb2d5c1a288ae&amp;mpshare=1&amp;scene=1&amp;srcid=1219E4YN8Tw4TU6zNCpHO6Qi&amp;sharer_sharetime=1576748110521&amp;sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd" target="_blank" rel="noreferrer">Preact（React）核心原理详解</a></li></ul>`,46),o=[p];function t(r,c,i,D,F,d){return n(),a("div",null,o)}const h=s(e,[["render",t]]);export{u as __pageData,h as default};
