import{_ as s,c as a,o as n,d as l}from"./app.590c1fbf.js";const d=JSON.parse('{"title":"建设前端性能监控系统","description":"","frontmatter":{},"headers":[{"level":2,"title":"打造 SDK","slug":"打造-sdk","link":"#打造-sdk","children":[]},{"level":2,"title":"异常监听","slug":"异常监听","link":"#异常监听","children":[{"level":3,"title":"错误边界","slug":"错误边界","link":"#错误边界","children":[]}]},{"level":2,"title":"前端容灾","slug":"前端容灾","link":"#前端容灾","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"DevOps/建设前端性能监控系统.md"}'),e={name:"DevOps/建设前端性能监控系统.md"},r=l(`<h1 id="建设前端性能监控系统" tabindex="-1">建设前端性能监控系统 <a class="header-anchor" href="#建设前端性能监控系统" aria-hidden="true">#</a></h1><p>前端性能监控系统，先打造一个检测错误和性能的 SDK，再通过 ELK 来收集数据，最后通过 Grafana 来展示可视化界面，当然，Prometheus 比 ELK 更牛逼</p><p>SDK 分三部分：错误、性能、元数据</p><p>性能方面多看 google 的标准，例如 web-vitals（LCP、FID）等东西</p><p>如何打造一个 SDK 呢？</p><p>如何上报数据？</p><p>四种方案</p><ul><li>同步 XMLHttpRequest</li><li>img.src</li><li>navigator.sendBeacon</li><li>fetch keepalive</li></ul><h2 id="打造-sdk" tabindex="-1">打造 SDK <a class="header-anchor" href="#打造-sdk" aria-hidden="true">#</a></h2><p><img src="https://s2.loli.net/2022/07/10/qiSaP68lhD7mvco.png" alt="下载"></p><h2 id="异常监听" tabindex="-1">异常监听 <a class="header-anchor" href="#异常监听" aria-hidden="true">#</a></h2><p>四种</p><ul><li>JS 执行异常 <ul><li>try-catch <ul><li>特点：可预见情况的错误监控</li><li>缺点：捕获不到具体语法错误和异步错误</li></ul></li><li>window.onerror <ul><li>推荐：捕获预料之外的错误</li><li>缺点：捕获不到资源加载异常或接口异常</li></ul></li></ul></li><li>资源加载异常 <ul><li>addEventListener(&#39;error&#39;, callback, true)</li></ul></li><li>Promise 异常 <ul><li>addeventListener(&#39;unhandledrejection&#39;,callback)</li></ul></li><li>React 异常 <ul><li>错误边界（Error Boundaries） <ul><li>getDerivedStateFromError <ul><li>作用：渲染备用 UI（展示组件错误时的 UI）</li><li>捕获所有子组件错误的方法</li><li>特点：在 render（渲染）阶段调用，不会出现副作用</li></ul></li><li>componentDidCatch <ul><li>作用：打印错误信息</li><li>特点：后代组件错误时调用</li><li>缺点：不会捕获事件处理器和异步代码的异常；会在 commit 阶段被调用，会有副作用</li></ul></li></ul></li><li>注意<strong>错误边界仅可以捕获其子组件的错误</strong>，它无法捕获其自身的错误。如果一个错误边界无法渲染错误信息，则错误会冒泡至最近的上层错误边界，这也类似于 JavaScript 中 <code>catch {}</code> 的工作机制。</li><li>错误边界有几个场景无法捕获： <ul><li>事件处理</li><li>异步代码（入 setTimeout 和 requestAnimationFrame 回调函数）</li><li>服务端渲染</li><li>ErrorBoundary 自身抛出的异常（并非来自子组件）</li></ul></li></ul></li></ul><h3 id="错误边界" tabindex="-1">错误边界 <a class="header-anchor" href="#错误边界" aria-hidden="true">#</a></h3><p>以前，组件内的 JavaScript 错误会导致 React 内部状态被破坏，并且在下一次渲染时产生可能无法追踪的错误</p><p>部分 UI 的 JavaScript 错误不应该导致整个应用奔溃，为了解决这个问题，React 16 引入了新的概念——错误边界</p><p>错误边界是一种 React 组件，这种组件<strong>可以捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI</strong></p><p>错误边界有几个场景无法捕获：</p><ul><li>事件处理</li><li>异步代码（入 setTimeout 和 requestAnimationFrame 回调函数）</li><li>服务端渲染</li><li>ErrorBoundary 自身抛出的异常（并非来自子组件）</li></ul><p>错误边界，在组件奔溃的时候降级展示，整个应用中可在多个地方展示</p><p>getDerivedStateFromError 展示降级 UI</p><p>componentDidCatch 上报错误日志给服务器</p><p>错误边界的工作方式类似于 JavaScript 的 <code>catch {}</code>，不同的地方在于错误边界只针对 React 组件</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ErrorBoundary</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> hasError</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">getDerivedStateFromError</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 更新 state 使下一次渲染能够显示降级后的 UI</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> hasError</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentDidCatch</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">errorInfo</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 你同样可以将错误日志上报给服务器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">logErrorToMyService</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorInfo</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hasError</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 你可以自定义降级后的 UI 并渲染</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Something went wrong.</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>React 异常</p><p>getDerivedStateFromError</p><p>componentDidCatch</p><h2 id="前端容灾" tabindex="-1">前端容灾 <a class="header-anchor" href="#前端容灾" aria-hidden="true">#</a></h2><p>localstorage</p><p>把数据存在 localstorage 中</p><p>cdn</p><p>每次更新备份一份静态数据</p><p>service worker</p><p>离线存储</p><p>sourceMap</p><p>sourceMap 是什么？sourceMap 就是一个文件，里面储存着位置信息</p><p>这个文件里保存的，是转换后代码的位置，和对应的转换前的位置</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMjA3MTI2NQ==&amp;mid=2247485042&amp;idx=1&amp;sn=f957ad6e31a4f6ffddaba91e1036da38&amp;scene=21" target="_blank" rel="noreferrer">从 0 到 1，Vue 大牛的前端搭建——异常监控系统</a></li><li><a href="https://mp.weixin.qq.com/s/d-P8s51U6IfJ-VrRkGygLA" target="_blank" rel="noreferrer">前端异常监控和容灾</a></li><li><a href="https://mp.weixin.qq.com/s/PQL6_FXzAM3eeQF2a9OsAg" target="_blank" rel="noreferrer">沉淀了 3 年的前端错误监控系统，打通你的脉络</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkxNDIzNTg4MA==&amp;mid=2247484211&amp;idx=1&amp;sn=1fe17b3d2f8d74267bb20c61fcf8204d&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">SourceMap 与前端异常监控</a></li><li><a href="https://juejin.cn/post/7078512301665419295" target="_blank" rel="noreferrer">前端监控体系搭建</a></li><li><a href="https://www.v2ex.com/t/800277" target="_blank" rel="noreferrer">一个前端报错监控的问题</a></li><li><a href="https://mp.weixin.qq.com/s/lwsfTGMasiITT3khmrsfqA" target="_blank" rel="noreferrer">深入浅出前端监控</a></li><li><a href="https://mp.weixin.qq.com/s/2d-LZIzZKQkQuRwD4ABq6A" target="_blank" rel="noreferrer">腾讯 3 面：说说前端监控平台/监控 SDK 的架构设计和难点亮点？</a></li><li><a href="https://www.zaozao.run/video/s8/s8-3" target="_blank" rel="noreferrer">李振：如何从 0 到 1 建设前端性能监控系统</a></li><li><a href="https://mp.weixin.qq.com/s/jZUjYNZX12AUJ7jcDn7Faw" target="_blank" rel="noreferrer">在页面关闭时，你知道哪些前端上传监控数据方案？</a></li><li><a href="https://www.zhihu.com/question/37585246/answer/2207162874" target="_blank" rel="noreferrer">你是如何搭建 Web 前端性能监控系统的？</a></li><li><a href="https://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days/" target="_blank" rel="noreferrer">7 天打造性能监控系统</a></li><li><a href="http://jartto.wang/2018/11/20/js-exception-handling/" target="_blank" rel="noreferrer">如何优雅处理前端异常？</a></li><li><a href="https://mp.weixin.qq.com/s/5j_oEEVrGP7g0IMNwyT6zw" target="_blank" rel="noreferrer">如何捕获和分析 JavaScript Error</a></li><li><a href="https://mp.weixin.qq.com/s/Bib5h1JFUS_DCiB41lXOAg" target="_blank" rel="noreferrer">前端 JavaScript 常见的报错及异常捕获</a></li><li><a href="https://github.com/aloudata/fe-weekly/blob/main/docs/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%E6%8E%A2%E7%B4%A2/README.md" target="_blank" rel="noreferrer">分布式全链路监控探索学习</a></li><li><a href="https://github.com/hawtim/hawtim.github.io/issues/53" target="_blank" rel="noreferrer">设计一个前端监控系统</a></li><li><a href="https://www.zhihu.com/question/37585246" target="_blank" rel="noreferrer">你是如何搭建 Web 前端性能监控系统的？</a></li><li><a href="http://rapheal.sinaapp.com/2014/11/06/javascript-error-monitor/" target="_blank" rel="noreferrer">前端代码异常监控</a></li></ul>`,39),p=[r];function o(t,i,c,F,D,y){return n(),a("div",null,p)}const u=s(e,[["render",o]]);export{d as __pageData,u as default};
