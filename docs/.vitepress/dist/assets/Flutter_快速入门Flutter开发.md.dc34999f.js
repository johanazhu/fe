import{_ as s,c as a,o as n,d as l}from"./app.590c1fbf.js";const C=JSON.parse('{"title":"快速入门 Flutter 开发","description":"","frontmatter":{},"headers":[{"level":2,"title":"Dart 基础知识","slug":"dart-基础知识","link":"#dart-基础知识","children":[{"level":3,"title":"程序入口","slug":"程序入口","link":"#程序入口","children":[]},{"level":3,"title":"控制台输出","slug":"控制台输出","link":"#控制台输出","children":[]},{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"创建和分配变量","slug":"创建和分配变量","link":"#创建和分配变量","children":[]},{"level":3,"title":"默认值","slug":"默认值","link":"#默认值","children":[]},{"level":3,"title":"检查 null 或零","slug":"检查-null-或零","link":"#检查-null-或零","children":[]},{"level":3,"title":"Dart null 检查最佳实践","slug":"dart-null-检查最佳实践","link":"#dart-null-检查最佳实践","children":[]},{"level":3,"title":"Functions（函数）","slug":"functions-函数","link":"#functions-函数","children":[]},{"level":3,"title":"异步编程","slug":"异步编程","link":"#异步编程","children":[]},{"level":3,"title":"async 和 await","slug":"async-和-await","link":"#async-和-await","children":[]}]},{"level":2,"title":"什么是声明式 UI","slug":"什么是声明式-ui","link":"#什么是声明式-ui","children":[]},{"level":2,"title":"Flutter 入门基础知识","slug":"flutter-入门基础知识","link":"#flutter-入门基础知识","children":[{"level":3,"title":"如何创建 Flutter 项目","slug":"如何创建-flutter-项目","link":"#如何创建-flutter-项目","children":[]},{"level":3,"title":"如何运行 Flutter 项目","slug":"如何运行-flutter-项目","link":"#如何运行-flutter-项目","children":[]},{"level":3,"title":"如何导入 Widget？","slug":"如何导入-widget","link":"#如何导入-widget","children":[]}]},{"level":2,"title":"认识视图（Views）","slug":"认识视图-views","link":"#认识视图-views","children":[]},{"level":2,"title":"布局与列表","slug":"布局与列表","link":"#布局与列表","children":[]},{"level":2,"title":"状态管理","slug":"状态管理","link":"#状态管理","children":[]},{"level":2,"title":"路由与导航","slug":"路由与导航","link":"#路由与导航","children":[]},{"level":2,"title":"线城和异步 UI","slug":"线城和异步-ui","link":"#线城和异步-ui","children":[]},{"level":2,"title":"手势检测及触摸事件处理","slug":"手势检测及触摸事件处理","link":"#手势检测及触摸事件处理","children":[{"level":3,"title":"如何处理 widget 上的其他手势","slug":"如何处理-widget-上的其他手势","link":"#如何处理-widget-上的其他手势","children":[]}]}],"relativePath":"Flutter/快速入门Flutter开发.md"}'),e={name:"Flutter/快速入门Flutter开发.md"},p=l(`<h1 id="快速入门-flutter-开发" tabindex="-1">快速入门 Flutter 开发 <a class="header-anchor" href="#快速入门-flutter-开发" aria-hidden="true">#</a></h1><p>Dart 基础知识</p><p>什么是声明式 UI</p><p>Flutter 入门基础知识</p><p>认识视图（Views）</p><p>布局与列表</p><p>状态管理</p><p>路由与导航</p><p>线程和异步 UI</p><p>手势检测及触摸事件处理</p><h2 id="dart-基础知识" tabindex="-1">Dart 基础知识 <a class="header-anchor" href="#dart-基础知识" aria-hidden="true">#</a></h2><h3 id="程序入口" tabindex="-1">程序入口 <a class="header-anchor" href="#程序入口" aria-hidden="true">#</a></h3><p>JavaScript 没有预定义的入口函数，但在 Dart 中，每个 app 都必须有一个顶级的 <code>main()</code> 函数作为应用程序的入口</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="控制台输出" tabindex="-1">控制台输出 <a class="header-anchor" href="#控制台输出" aria-hidden="true">#</a></h3><p>要在 Dart 中打印到控制台，可使用 <code>print</code>：</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JavaScript</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;Hello World&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Dart</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;Hello World&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-hidden="true">#</a></h3><p>Dart 是类型安全的-它使用静态类型检查和运行时的组合，可使用类型，也可以不使用类型</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// a 的类型为整数</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">124</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// b 的类型没设置，在运行时引擎自己推断类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="创建和分配变量" tabindex="-1">创建和分配变量 <a class="header-anchor" href="#创建和分配变量" aria-hidden="true">#</a></h3><p>在 JavaScript 中，无法定义变量类型</p><p>在 Dart 中，变量必须是明确的类型或系统能够解析的类型</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JavaScript</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;JavaScript&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Dart</span></span>
<span class="line"><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;dart&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 明确 String 类型</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> otherName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;Dart&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 推断 String 类型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在 Dart 中两种都可以接受</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="默认值" tabindex="-1">默认值 <a class="header-anchor" href="#默认值" aria-hidden="true">#</a></h3><p>在 JavaScript 中，未初始化的变量是 <code>undefined</code></p><p>在 Dart 中，未初始化的变量的初始值为 <code>null</code></p><blockquote><p>PS：Number 在 Dart 中也被视为对象，所以只要是带有数字类型的初始化变量的值都是“null”</p></blockquote><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JavaScript</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Dart</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// null</span></span>
<span class="line"><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// null</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="检查-null-或零" tabindex="-1">检查 null 或零 <a class="header-anchor" href="#检查-null-或零" aria-hidden="true">#</a></h3><p>在 JavaScript 中，1 或任何非 null 对象的值都被视为 true</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JavaScript</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myNull </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">myNull) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">null为false</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> zero </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">zero) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0是false</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在 Dart 中，只有布尔值“true”被视为 true</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Dart</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myNull </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (myNull </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;myNull的值就是null&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> zero </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(zero </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;zero的值就是0&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="dart-null-检查最佳实践" tabindex="-1">Dart null 检查最佳实践 <a class="header-anchor" href="#dart-null-检查最佳实践" aria-hidden="true">#</a></h3><p>null-aware 运算符</p><ul><li><code>?.</code> 运算符在左边为 null 的情况下会阻断右边的调用</li><li><code>??</code> 运算符主要作用是在左侧表达式为 null 时为其设置默认值</li></ul><h3 id="functions-函数" tabindex="-1">Functions（函数） <a class="header-anchor" href="#functions-函数" aria-hidden="true">#</a></h3><p>Dart 和 JavaScript 函数类似，主要区别是声明：</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ES5</span></span>
<span class="line"><span style="color:#A6ACCD;">function </span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Dart</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 也可以这样写，设置返回结果</span></span>
<span class="line"><span style="color:#FFCB6B;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-hidden="true">#</a></h3><p>与 JavaScript 一样， Dart 支持单线程执行。在 JavaScript 中，Promise 对象表示异步操作的最终完成（失败）及其结果值，Dart 使用 <code>Future</code> 来表示异步操作</p><h3 id="async-和-await" tabindex="-1">async 和 await <a class="header-anchor" href="#async-和-await" aria-hidden="true">#</a></h3><p>async 函数声明定义了一个异步函数</p><p>在 JavaScript 中，async 函数返回一个 Promise。await 运算符是用来等待 Promise：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JavaScript</span></span>
<span class="line"><span style="color:#A6ACCD;">async </span><span style="color:#82AAFF;">_getIPAddress</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://httpbin.org/ip</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 Dart 中， async 函数返回一个 Future，函数的主体是稍后执行。await 运算符用于等待 Future：</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Dart</span></span>
<span class="line"><span style="color:#82AAFF;">_getIPAddress</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;http://httpbin.org/ip&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HttpRequest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">request</span><span style="color:#A6ACCD;">(url)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="什么是声明式-ui" tabindex="-1">什么是声明式 UI <a class="header-anchor" href="#什么是声明式-ui" aria-hidden="true">#</a></h2><p>什么是声明式 UI</p><p>像 React 那样</p><h2 id="flutter-入门基础知识" tabindex="-1">Flutter 入门基础知识 <a class="header-anchor" href="#flutter-入门基础知识" aria-hidden="true">#</a></h2><h3 id="如何创建-flutter-项目" tabindex="-1">如何创建 Flutter 项目 <a class="header-anchor" href="#如何创建-flutter-项目" aria-hidden="true">#</a></h3><ul><li><p>命令行</p><ul><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">flutter</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">projectnam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>使用安装了 Flutter 和 Dart 插件的 IDE</p></li></ul><h3 id="如何运行-flutter-项目" tabindex="-1">如何运行 Flutter 项目 <a class="header-anchor" href="#如何运行-flutter-项目" aria-hidden="true">#</a></h3><ul><li><p>命令行</p><ul><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">flutter</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">iPhone X</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>-d 后面跟的是具体的设备名称</p></li></ul></li><li><p>在 IDE 中使用“run”选项</p></li></ul><h3 id="如何导入-widget" tabindex="-1">如何导入 Widget？ <a class="header-anchor" href="#如何导入-widget" aria-hidden="true">#</a></h3><p>Widget 可以理解为组件，三部分 Widget，系统默认主题（安卓风和 iOS 风）、基础组件 widget、自定义 widget</p><p>在 Flutter 中，有两种 UI 库</p><ul><li>Material Design 样式，导入 <code>material.dart</code> 包</li><li>iOS 样式，导入 <code>Cupertino</code> 库</li></ul><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;package:flutter/material.dart&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;package:flutter/cupertino.dart&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;package:flutter/widgets.dart&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;package:flutter/my_widgets.dart&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 自定义 widget</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="认识视图-views" tabindex="-1">认识视图（Views） <a class="header-anchor" href="#认识视图-views" aria-hidden="true">#</a></h2><p>Widget 就像 React 中的 组件概念</p><p>有状态 Widget —— 有状态组件</p><p>无状态 Widget —— 无状态组件</p><h2 id="布局与列表" tabindex="-1">布局与列表 <a class="header-anchor" href="#布局与列表" aria-hidden="true">#</a></h2><p>一切皆为 Widget，布局与列表有相应的 Widget</p><p>Row：水平方向的布局</p><p>Column：垂直方向的布局</p><p>Stack Widget：分层 ，类似于 CSS 中的 position ，坐 Z 轴方向的布局</p><p>没有样式，样式也是 widget 组成</p><p>Padding 、Center、TextStyle 都是 widget</p><p>ListView：滚动组件，适用于列表滚动</p><ul><li><p>如何更新 widget 列表，setState()</p></li><li><p>ListView.Builder 构建动态列表或者拥有大量数据时使用</p></li></ul><h2 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-hidden="true">#</a></h2><p>StatelessWidget：无状态组件，只做渲染，不对状态进行处理</p><ul><li>例如 AboutDialog、Text、CircleAvator 等</li></ul><p>StatefulWiget：有状态组件，通过 setState 更新状态，状态更新后，视图会重新渲染</p><ul><li>例如 Checkbox、Radio、Slider、Form 等</li></ul><h2 id="路由与导航" tabindex="-1">路由与导航 <a class="header-anchor" href="#路由与导航" aria-hidden="true">#</a></h2><p>有两个主要的 widget 用于页面之间导航：</p><ul><li>Route 是一个应用程序抽象的屏幕或页面</li><li>Navigator 是一个管理路由的 widget</li></ul><h2 id="线城和异步-ui" tabindex="-1">线城和异步 UI <a class="header-anchor" href="#线城和异步-ui" aria-hidden="true">#</a></h2><p>async/await</p><p>Isolate 是分离的运行线程</p><p>如何进行网络请求：http package 请求插件</p><h2 id="手势检测及触摸事件处理" tabindex="-1">手势检测及触摸事件处理 <a class="header-anchor" href="#手势检测及触摸事件处理" aria-hidden="true">#</a></h2><p>两种方法来添加点击监听</p><ol><li><p>如果 widget 本身支持事件检测，直接传递给它一个函数，并在这个函数里实现响应方法。例如 RaisedButton widget 拥有一个 onPressed 参数</p></li><li><p>如果 widget 本身不支持事件监测，则在外面包裹一个 GestureDetector，并给它的 onTap 属性传递一个函数</p></li></ol><h3 id="如何处理-widget-上的其他手势" tabindex="-1">如何处理 widget 上的其他手势 <a class="header-anchor" href="#如何处理-widget-上的其他手势" aria-hidden="true">#</a></h3><p>使用 GestureDetector，可以监听多种手势，例如</p><ul><li>点击 <ul><li>onTapDown：在特定位置轻触手势接触了屏幕</li><li>onTapUp：在特定位置产生了一个轻触手势，并停止接触屏幕</li><li>onTap：产生了一个轻触手势</li><li>onTapCancel：触发了 onTapDown 但没能触发 tap</li></ul></li><li>双击 <ul><li>onDoubleTap：用户在同一个位置快速点击了两下屏幕</li></ul></li><li>长按 <ul><li>onLongPress：用户在同一个位置长时间接触屏幕</li></ul></li><li>垂直拖动 <ul><li>onVerticalDragStart：接触了屏幕，并且可能会垂直移动</li><li>onVerticalDragUpdate：接触了屏幕，并继续在垂直方向移动</li><li>onVerticalDragEnd：之前接触了屏幕并垂直移动，并在停止接触屏幕前以某个垂直的速度移动</li></ul></li><li>水平拖动 <ul><li>onHorizontalDragStart：接触了屏幕，并且可能会水平移动</li><li>onHorizontalDragUpdate：接触了屏幕，并继续在水平方向移动</li><li>onHorizontalDragEnd：之前接触了屏幕并水平移动的触摸点与屏幕分离</li></ul></li></ul>`,92),t=[p];function r(o,i,c,d,u,y){return n(),a("div",null,t)}const A=s(e,[["render",r]]);export{C as __pageData,A as default};
