import{_ as s,c as a,o as l,d as n}from"./app.590c1fbf.js";const D=JSON.parse('{"title":"面试常客：HTTP 缓存","description":"","frontmatter":{},"headers":[{"level":2,"title":"缓存操作的目标","slug":"缓存操作的目标","link":"#缓存操作的目标","children":[]},{"level":2,"title":"缓存发展史","slug":"缓存发展史","link":"#缓存发展史","children":[]},{"level":2,"title":"两大缓存类型对比","slug":"两大缓存类型对比","link":"#两大缓存类型对比","children":[{"level":3,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[]},{"level":3,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]},{"level":3,"title":"协商缓存的条件请求","slug":"协商缓存的条件请求","link":"#协商缓存的条件请求","children":[]},{"level":3,"title":"什么时候用强缓存，什么时候用协商缓存？","slug":"什么时候用强缓存-什么时候用协商缓存","link":"#什么时候用强缓存-什么时候用协商缓存","children":[]}]},{"level":2,"title":"缓存位置","slug":"缓存位置","link":"#缓存位置","children":[{"level":3,"title":"Memory Cache","slug":"memory-cache","link":"#memory-cache","children":[]},{"level":3,"title":"Disk Cache","slug":"disk-cache","link":"#disk-cache","children":[]},{"level":3,"title":"Service Worker","slug":"service-worker","link":"#service-worker","children":[]},{"level":3,"title":"Push Cache","slug":"push-cache","link":"#push-cache","children":[]}]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"非前端工程化项目","slug":"非前端工程化项目","link":"#非前端工程化项目","children":[]},{"level":3,"title":"后端缓存实践","slug":"后端缓存实践","link":"#后端缓存实践","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"HTTP/HTTP缓存.md"}'),e={name:"HTTP/HTTP缓存.md"},p=n(`<h1 id="面试常客-http-缓存" tabindex="-1">面试常客：HTTP 缓存 <a class="header-anchor" href="#面试常客-http-缓存" aria-hidden="true">#</a></h1><p>速度、速度，还是速度，一个网站要想体验好，就必须在第一时间以最快的速度显示出来。mysql 查询慢，就加一层 redis 做缓存，网站资源加载慢，怎么做，使用 HTTP 缓存</p><p>HTTP 缓存自 HTTP/1.0 就开始有，为的是减少服务器压力，加快网页响应速度</p><h2 id="缓存操作的目标" tabindex="-1">缓存操作的目标 <a class="header-anchor" href="#缓存操作的目标" aria-hidden="true">#</a></h2><p>HTTP 缓存只能存储 GET 请求的响应，而对其他类型的请求无能为力</p><h2 id="缓存发展史" tabindex="-1">缓存发展史 <a class="header-anchor" href="#缓存发展史" aria-hidden="true">#</a></h2><p>HTTP/1.0 提出缓存概念，即强缓存 Expires 和协商缓存 Last-Modified。后 HTTP/1.1 又有了更好的方案，即强缓存 Cache-Control 和协商缓存 ETag</p><p>为什么 Expires 和 Last-Modified 不适用呢？</p><p>Expires 即过期时间，但问题是这个时间点是服务器的时间，如果客户端的时间和服务器时间有差，就不准确。所以用 Cache-Control 来代替，它表示过期时长，这就没歧义了</p><p>Last-Modified 即最后修改时间，而它能感知的单位时间是秒，也就是说如果在 1 秒内改变多次，内容文件虽然改变了，但展示还是之前的，存在不准确的场景，所以就有了 ETag，通过内容给资源打标识来判断资源是否变化</p><p>以下表格利于对比理解</p><table><thead><tr><th>版本</th><th>强缓存</th><th>协商缓存</th></tr></thead><tbody><tr><td>HTTP/1.0</td><td>Expires</td><td>Last-Modified</td></tr><tr><td>HTTP/1.1</td><td>Cache-Control</td><td>ETag</td></tr></tbody></table><h2 id="两大缓存类型对比" tabindex="-1">两大缓存类型对比 <a class="header-anchor" href="#两大缓存类型对比" aria-hidden="true">#</a></h2><p>前文已介绍不同版本下的缓存类型。当时提了有一句强缓存和协商缓存，但没具体介绍。现在来讲讲这两种缓存类型</p><h3 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-hidden="true">#</a></h3><h4 id="cache-control" tabindex="-1">Cache-Control <a class="header-anchor" href="#cache-control" aria-hidden="true">#</a></h4><ul><li><p>HTTP/1.1</p></li><li><p>通过过期时长控制缓存，对应的字段有很多，例如 max-age</p><ul><li>例如 Cache-Control: max-age=3600，表示缓存时间为 3600 秒，过期失效</li></ul></li><li><p>缓存请求指令：</p><ul><li><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F07178;">Cache-Control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">max-age=&lt;seconds&gt;</span></span>
<span class="line"><span style="color:#F07178;">Cache-Control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">max-stale[=&lt;seconds&gt;]</span></span>
<span class="line"><span style="color:#F07178;">Cache-Control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">min-fresh=&lt;seconds&gt;</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">no-cache</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">no-store</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">no-transform</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">only-if-cached</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li><li><p>缓存响应指令：</p><ul><li><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">must-revalidate</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">no-cache</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">no-store</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">no-transform</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">public</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">private</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">proxy-revalidate</span></span>
<span class="line"><span style="color:#F07178;">Cache-Control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">max-age=&lt;seconds&gt;</span></span>
<span class="line"><span style="color:#F07178;">Cache-control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">s-maxage=&lt;seconds&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li><li><p>其中关键点：</p><ul><li><code>Cache-control: no-cache</code><ul><li>跳过当前的强缓存，发送 HTTP 请求（如有协商缓存标识即直接进入<strong>协商缓存阶段</strong>）</li><li>no-cache 的含义和 <code>max-age=0</code> 一样 ，即跳过强缓存，强制刷新</li></ul></li><li><code>Cache-control: no-store</code><ul><li>不使用缓存（包括协商缓存）</li></ul></li><li><code>Cache-Control: public, max-age=31536000</code><ul><li>一般用于缓存静态资源</li><li>public：响应可以被中间代理、CDN 等缓存</li><li>private：专用于个人的缓存，中间代理、CDN 等能换缓存此响应</li><li>max-age：单位是秒</li></ul></li></ul></li><li><blockquote><p>更多指令参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer">指令大全</a></p></blockquote></li></ul><h4 id="expires" tabindex="-1">Expires <a class="header-anchor" href="#expires" aria-hidden="true">#</a></h4><ul><li><p>HTTP/1.0</p></li><li><p>语法：</p><ul><li><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F07178;">Expires</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&lt;http-date&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>即过期时间，存在于服务器返回的响应头里</p><ul><li>Expires: Mon, 11 Apr 2022 06:57:18 GMT</li><li>表示资源在 2022 年 4 月 11 号 6 点 57 分过期，过期了就会往服务端发请求</li></ul></li><li><p>如果在<code>Cache-Control</code>响应头设置了 &quot;max-age&quot; 或者 &quot;s-max-age&quot; 指令，那么 <code>Expires</code> 头会被忽略</p></li><li><p>缺点：服务器时间与浏览器时间可能不一致</p></li><li><blockquote><p>更多指令参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires" target="_blank" rel="noreferrer">指令大全</a></p></blockquote></li></ul><h4 id="cache-control-vs-expires" tabindex="-1">Cache-Control VS Expires <a class="header-anchor" href="#cache-control-vs-expires" aria-hidden="true">#</a></h4><ul><li>Cache-Control 较之 Expires 更为精准</li><li>同时存在时，Cache-Control 优先级大于 Expires</li><li>Expires 是 HTTP/1.0 提出，其浏览器兼容性更好，Cache-Control 是 HTTP/1.1 提出，可同时存在，当有不支持 Cache-Control 的浏览器时会以 Expires 为准</li></ul><h3 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a></h3><p>协商缓存需要配合强缓存使用，使用协商缓存的前提是设置强缓存设置 <code>Cache-Control: no-cache</code>或者 <code>pragma: no-cache</code>或者 <code>max-age=0</code> 告诉浏览器不走强缓存</p><blockquote><p>pragma 是 HTTP/1.0 中禁止网页缓存的字段，其取值为 no-cache 和 Cache-Control 的 no-cache 效果一样</p></blockquote><h4 id="etag-if-none-match" tabindex="-1">ETag/If-None-Match <a class="header-anchor" href="#etag-if-none-match" aria-hidden="true">#</a></h4><ul><li>HTTP/1.1</li><li>即生成文件唯一标识来判断是否过期。只要内容改变，这个值就会变</li><li>与 <code>If-None-Match</code> 配合，ETag 是请求服务器后返回给每个资源文件的唯一标识，客户端会将此标识存在客户端（即浏览器）中，下次请求时会在请求头的 <code>If-Nono-Match</code> 中将其值带上，服务器判断 <code>If-None-Match</code> 是否与自身服务器上的 ETag 一致，如果一致则返回 304，重定向跳转使用本地缓存；不一致，则返回 200，将最新资源返回给客户端，并带上 ETag</li><li>更多指令参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag" target="_blank" rel="noreferrer">指令大全</a></li></ul><h4 id="last-modified-if-modified-since" tabindex="-1">Last-Modified/If-Modified-Since <a class="header-anchor" href="#last-modified-if-modified-since" aria-hidden="true">#</a></h4><ul><li>HTTP/1.0</li><li>最后修改时间，即通过最后修改时间来判断是否过期。在浏览器第一次给服务器发送请求后，服务器会在响应头上加上这个字段</li><li>与 <code>If-Modified-Since</code> 配合，客户端访问服务器资源时，服务器端会将 Last-Modified 放入响应头中，即这个资源在服务器上的最后修改时间，客户端缓存这个值，等下次请求这个资源时，浏览器会检测到请求头中的 Last-Modified，于是乎添加 <code>If-Modified-Since</code>，如果 <code>If-Modified-Since</code> 的值与服务器中这个资源的最后修改时间一致，则返回 304，重定向跳转使用本地缓存；不一致，则返回 200，将最新资源返回给客户端，并带上 Last-Modified</li><li>缺点： <ul><li>文件虽然被修改，但最后的内容没有变化，这样文件修改时间还是会更新</li><li>有些文件修改频率在秒以内，这样以秒粒度来记录就不适用了</li><li>有些服务器无法精准获取文件的最后修改时间</li></ul></li><li>更多指令参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified" target="_blank" rel="noreferrer">指令大全</a></li></ul><h4 id="etag-vs-last-modified" tabindex="-1">ETag VS Last-Modified <a class="header-anchor" href="#etag-vs-last-modified" aria-hidden="true">#</a></h4><ul><li>精确度 <ul><li>ETag &gt; Last-Modified。ETag 是通过内容给资源打标识来判断资源是否变化，而 Last-Modified 不一样，在某些场景下准确度会失效。例如编辑文件，但是文件内容未变，缓存会失效；或者在 1 秒内改变多次，Last-Modified 能感知的单位时间是秒</li></ul></li><li>性能 <ul><li>Last-Modified &gt; ETag。Last-Modified 仅仅记录一个时间点，而 ETag 需要根据文件的具体内容生成哈希值</li></ul></li><li>如果两个都支持的话，服务器会优先选择 ETag</li></ul><h3 id="协商缓存的条件请求" tabindex="-1">协商缓存的条件请求 <a class="header-anchor" href="#协商缓存的条件请求" aria-hidden="true">#</a></h3><p>前文说到协商缓存是在请求头添加 <code>If-None-Match</code> 或 <code>If-Modified-Since</code>，这些请求头是什么，添加有什么用？</p><p>强缓存是通过具体时间到期或过期时长来控制缓存，这就有个问题了，如果其中的一些文件修改了，因为强缓存，浏览器展示的还是原来的数据，所以对那种常变化的数据不能使用强缓存做缓存策略，于是乎，就有了协商缓存，通过文件变化告诉浏览器缓存失效，使用前需去服务器验证是否是最新版？</p><p>这样，浏览器就要连续发送两个请求来验证：</p><ol><li>先是 HEAD 请求，获取资源的修改时间、hash 值等元信息，然后与缓存数据比较，如果没有改动就使用缓存</li><li>否则就再发一个 GET 请求，获取最新的版本</li></ol><p>但这样的两个请求的网络成本太高，所以 HTTP 协议就定义了一系列 If 开头的条件请求字段，专门用来检查验证资源是否过期，把两个请求合并在一个请求中做。而且验证的责任也交给服务器</p><ul><li>If-Modified-Since：和 Last-modified 比较，是否已经修改了</li><li>If-None-Match：和 ETag 比较，唯一标识是否一致</li><li>If-Unmodified-Since：和 Last-modified 对比，是否修改</li><li>If-Match：和 ETag 比较是否匹配</li><li>If-Range</li></ul><p>其中，最常见的当属是 If-Modified-Since 和 If-None-Match。它们分别对应 Last-Modified 和 ETag。需要第一次的响应报文预先提供 Last-Modified 和 ETag，然后第二次请求时就可以带上缓存里的原址，验证资源是否是最新的</p><p>如果资源没有变，服务器就回应一个 304 Not Modified ，表示缓存依然有效，浏览器就可以更新一个有效期，然后使用缓存了</p><p><img src="https://s2.loli.net/2022/04/25/7KxHO64YUJWsqnr.png" alt="缓存流程"></p><h3 id="什么时候用强缓存-什么时候用协商缓存" tabindex="-1">什么时候用强缓存，什么时候用协商缓存？ <a class="header-anchor" href="#什么时候用强缓存-什么时候用协商缓存" aria-hidden="true">#</a></h3><p>首先强缓存的权重大于协商缓存，当强缓存存在时，协商缓存只能看着；其次 HTTP/1.1 中的缓存标识符大于 HTTP/1；所以当 Cache-Control 存在时，看它的，如果它不存在，则看 Expires，如果将强缓存设置为 <code>Cache-Control：no-cache</code>、<code>Cache-Control：max-age=0</code>、<code>pragma: no-cache</code>，即告诉浏览器不走强缓存，则进入协商缓存。</p><p>判断上次响应中是否有 ETag，如果有，则发起请求，请求头中带有条件请求 <code>If-None-Match</code>，如果没有，则再判断上次响应中是否有 Last-Modified，如果有，则发起请求头中带<code>If-Modified-Since</code> 的条件请求，如果没有，则说明没有协商缓存，发起 HTTP 请求即可。无论是带<code>If-None-Match</code>的请求还是 <code>If-Modified-Since</code> 的请求，都会返回状态（由服务器端判读资源是否变化），如果是 304，说明缓存资源未变，使用本地缓存；如果是 200，则说明资源改变，发起 HTTP 请求，并记住响应头中的 ETag/Last-Modified</p><p>大致流程图如下所示：</p><p><img src="https://s2.loli.net/2022/04/26/4Q2LaJynO6wRxdb.png" alt="缓存判断流程图"></p><p>那么哪些资源要采用强缓存，哪些资源采用协商缓存呢？</p><p>像静态资源这类我们长期不会去变动的资源应该用强缓存，不难理解；而像我们常修改的文件应该采用协商缓存，如果资源没变，那么当用户第二次进去还是用该资源，如果资源修改，用户进入发起 HTTP 请求获取最新资源</p><p>我们在访问网站时，如果留心都能在 F12 中观察到一二。如图所示，我的<a href="https://fe.azhubaby.com/" target="_blank" rel="noreferrer">五年前端三年面试</a>放在 github 服务器上，F12 进入 Network 中，能看到返回头中的信息。Cache-Control、Expires、ETag、Last-Modified 都存在</p><p><img src="https://s2.loli.net/2022/04/11/qiVQvOkDPuBmeg3.png" alt="五年前端三年面试"></p><h2 id="缓存位置" tabindex="-1">缓存位置 <a class="header-anchor" href="#缓存位置" aria-hidden="true">#</a></h2><p>上文中常提到无论使用强缓存还是协商缓存，都会从浏览器本地中获取，那么浏览器的本地存储是存在哪里，他们又有什么分类呢？</p><p>按照缓存位置分类，分为四处，Memory Cache（内存缓存）、Disk Cache（硬盘缓存）、Service Worker、Push Cache</p><h3 id="memory-cache" tabindex="-1">Memory Cache <a class="header-anchor" href="#memory-cache" aria-hidden="true">#</a></h3><p>因为内存有限，并不是所有的资源文件都会放在内存里缓存，它主要用来缓存有 preloader 相关指令的资源，比如<code>&lt;link rel=&quot;prefetch&quot;&gt;</code>。preloader 可以一边解析 js/css 文件，一边网络请求下一个资源</p><h3 id="disk-cache" tabindex="-1">Disk Cache <a class="header-anchor" href="#disk-cache" aria-hidden="true">#</a></h3><p>磁盘上的缓存。在所有浏览器缓存中，disk cache 覆盖面最大，它会根据 HTTP Header 中的字段判断哪些资源需要缓存，哪些资源已经过期需要重新从服务器端请求</p><h3 id="service-worker" tabindex="-1">Service Worker <a class="header-anchor" href="#service-worker" aria-hidden="true">#</a></h3><p>独立线程，借鉴了 Web Worker 的思路。即让 JS 运行在主线程之外，由于它脱离浏览器窗口，因为无法直接访问 DOM，但是它还是能做很多事情，如</p><ul><li><p>离线缓存，Service Worker Cache</p></li><li><p>消息推送</p></li><li><p>网络代理</p></li><li><p>它是 PWA 的重要实现机制</p></li></ul><h3 id="push-cache" tabindex="-1">Push Cache <a class="header-anchor" href="#push-cache" aria-hidden="true">#</a></h3><p>即推送缓存，浏览器中的最后一道防线，HTTP2 中的内容</p><p>优先级：Service Worker--&gt;Memory Cache--&gt;Disk Cache--&gt;Push Cache。</p><h2 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-hidden="true">#</a></h2><p>说了这么多理论知识，等实战的时候却一头雾水，怎么破？</p><p>以上皆为口舌之辩，唯有实践出真章（以上皆为面试之辩，唯有实践出本事）</p><p>目前前端项目都是以 webpack 或类 webpack 工具库打包，在 webpack 中配置哈希，前端方面的缓存工作就完成了</p><p>我们要实现的效果是：</p><ul><li>HTML：协商缓存</li><li>CSS、JS、图片等资源：强缓存，文件名带上 hash</li></ul><p>webpack 中的哈希有三种：hash、chunkHash、contentHash</p><ul><li><p>Hash：和整个项目的构建相关，只要项目文件有改变，整个项目构建的 hash 值就会改变</p></li><li><p>chunkHash：和 webpack 打包的 chunk 有关，不同的入口会生成不同的 chunkHash 值</p></li><li><p>contentHash：根据文件内容来定义 hash，文件内容不变，则 contentHash 不变</p></li></ul><p>这边需要把 CSS 用 contentHash 处理，其他资源用 chunkHash 做处理</p><h3 id="非前端工程化项目" tabindex="-1">非前端工程化项目 <a class="header-anchor" href="#非前端工程化项目" aria-hidden="true">#</a></h3><p>即传统的前端页面，一般放在静态服务器中，那么就要对修改的文件做版本控制，例如在入口文件 index.js 上加版本号（index-v2.min.js）或者加时间戳（time=1626226），以此做缓存策略</p><h3 id="后端缓存实践" tabindex="-1">后端缓存实践 <a class="header-anchor" href="#后端缓存实践" aria-hidden="true">#</a></h3><p>真正起到缓存作用的是在后端，后端来设置缓存策略，告诉浏览器能否做缓存。这里我们对强缓存和协商缓存做个 demo 来实验下</p><h4 id="强缓存方案" tabindex="-1">强缓存方案 <a class="header-anchor" href="#强缓存方案" aria-hidden="true">#</a></h4><p>代码如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> express </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">express</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> options </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">etag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 禁用协商缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">lastModified</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 禁用协商缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">setHeaders</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">stat</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">max-age=10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 强缓存超时时间为10秒</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(express</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">static</span><span style="color:#A6ACCD;">(__dirname </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/public</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3008</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>PS：代码来源自：<a href="https://juejin.cn/post/6844904153043435533" target="_blank" rel="noreferrer">图解 HTTP 缓存</a>，在做测试时，需要注意，强缓存下，刷新页面是测不出来，点击后返回方能有效</p></blockquote><p><img src="https://s2.loli.net/2022/04/26/sdXPHy7ljLeBCTN.gif" alt="强缓存效果"></p><h4 id="协商缓存方案" tabindex="-1">协商缓存方案 <a class="header-anchor" href="#协商缓存方案" aria-hidden="true">#</a></h4><p>代码如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> express </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">express</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> options </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">etag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 开启协商缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">lastModified</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 开启协商缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">setHeaders</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">stat</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Cache-Control</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">max-age=00</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 浏览器不走强缓存</span></span>
<span class="line"><span style="color:#F07178;">            Pragma</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">no-cache</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 浏览器不走强缓存</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(express</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">static</span><span style="color:#A6ACCD;">(__dirname </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/public</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3001</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>效果如下：</p><p><img src="https://s2.loli.net/2022/04/26/jw1bythDvuJcq94.gif" alt="协商缓存效果"></p><p>附上两个 demo 地址供君参考</p><ul><li><p><a href="https://strong-cache.vercel.app/" target="_blank" rel="noreferrer">强缓存</a></p></li><li><p><a href="https://negotiate-cache.vercel.app/" target="_blank" rel="noreferrer">协商缓存</a></p></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>HTTP 为什么要缓存，为了分担服务器压力，也为了让页面加载更快</p><p>有什么手段？HTTP 的强缓存和协商缓存，强缓存作用于那些不怎么变化的资源（如引入的库，js，css 等），协商缓存适用常更新的文件（例如 html）</p><p>强缓存是什么？在 HTTP/1.0 中以 Expires 为依据，但它不准确，HTTP 协议升级成 1.1 后，用新标识符 Cache-Control 来代替，但两者可以同时存在，Cache-Control 的权重更大一些</p><p>协商缓存是什么？在 HTTP/1.0 中以 Last-Modified 为依据，即最后过期修改时间，它也不准确，HTTP 升级成 1.1 后，用新标识符 ETag 来代替，两者可同时存在，后者的权重更大</p><p>无论是 Expires ，还是 Last-Modified，都是以时间点来依据，理论上是不出问题，但却出问题了，所以就有了新的方案</p><p>其中强缓存存在时，浏览器会采用强缓存标识符来缓存，当将强缓存设置为失效时，浏览器则会采用协商缓存来做缓存策略</p><p>以上，即使笔者所理解的 HTTP 缓存</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://www.jianshu.com/p/54cc04190252" target="_blank" rel="noreferrer">深入理解浏览器的缓存机制</a></li><li><a href="https://www.cnblogs.com/duiniweixiao/p/8884274.html" target="_blank" rel="noreferrer">彻底理解浏览器的缓存机制</a></li><li><a href="https://mp.weixin.qq.com/s/03OAnrJ5kM-kdITr00YR4Q" target="_blank" rel="noreferrer">前端缓存最佳实践</a></li><li><a href="https://mp.weixin.qq.com/s/CsJyKVq3IIjDv32TZ9m7fQ" target="_blank" rel="noreferrer">浏览器缓存的力量</a></li><li><a href="https://juejin.cn/post/6942264171870289956" target="_blank" rel="noreferrer">node 实践彻底搞懂强缓存和协商缓存</a></li><li><a href="https://juejin.cn/post/6944891188826603528" target="_blank" rel="noreferrer">浅析 HTTP 缓存</a></li><li><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noreferrer">MDN web docs</a></li><li><a href="https://juejin.cn/post/6844904153043435533" target="_blank" rel="noreferrer">图解 HTTP 缓存</a></li></ul>`,97),o=[p];function r(t,c,i,d,h,C){return l(),a("div",null,o)}const F=s(e,[["render",r]]);export{D as __pageData,F as default};
