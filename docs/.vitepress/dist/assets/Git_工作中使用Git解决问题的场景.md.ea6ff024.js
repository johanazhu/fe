import{_ as s,c as a,o as n,d as l}from"./app.590c1fbf.js";const d=JSON.parse('{"title":"工作中使用 Git 解决问题的场景","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用 git rebase 让提交记录更加清晰可读","slug":"使用-git-rebase-让提交记录更加清晰可读","link":"#使用-git-rebase-让提交记录更加清晰可读","children":[{"level":3,"title":"rebase 基本用法","slug":"rebase-基本用法","link":"#rebase-基本用法","children":[]},{"level":3,"title":"git rebase VS git merge","slug":"git-rebase-vs-git-merge","link":"#git-rebase-vs-git-merge","children":[]},{"level":3,"title":"rebase 的交互模式","slug":"rebase-的交互模式","link":"#rebase-的交互模式","children":[]}]},{"level":2,"title":"使用  git reflog + git reset 跳到任意 commit","slug":"使用-git-reflog-git-reset-跳到任意-commit","link":"#使用-git-reflog-git-reset-跳到任意-commit","children":[]},{"level":2,"title":"使用 git cherry-pick 获取指定的 commit","slug":"使用-git-cherry-pick-获取指定的-commit","link":"#使用-git-cherry-pick-获取指定的-commit","children":[]},{"level":2,"title":"使用 git commit --amend 更改提交内容","slug":"使用-git-commit-amend-更改提交内容","link":"#使用-git-commit-amend-更改提交内容","children":[]},{"level":2,"title":"使用 git revert 回滚某次的提交","slug":"使用-git-revert-回滚某次的提交","link":"#使用-git-revert-回滚某次的提交","children":[]},{"level":2,"title":"使用 git stash 来暂存文件","slug":"使用-git-stash-来暂存文件","link":"#使用-git-stash-来暂存文件","children":[{"level":3,"title":"四大工作区域","slug":"四大工作区域","link":"#四大工作区域","children":[]}]},{"level":2,"title":"配置 git alias 提升工作效率","slug":"配置-git-alias-提升工作效率","link":"#配置-git-alias-提升工作效率","children":[]},{"level":2,"title":"除此之外","slug":"除此之外","link":"#除此之外","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"Git/工作中使用Git解决问题的场景.md"}'),e={name:"Git/工作中使用Git解决问题的场景.md"},p=l(`<h1 id="工作中使用-git-解决问题的场景" tabindex="-1">工作中使用 Git 解决问题的场景 <a class="header-anchor" href="#工作中使用-git-解决问题的场景" aria-hidden="true">#</a></h1><p>简单来说，就这七点：</p><ul><li><p>使用 git rebase 让提交记录更加清晰可读</p></li><li><p>使用 git reflog + git reset 跳到任意 commit</p></li><li><p>使用 git cherry-pick 获取指定的 commit</p></li><li><p>使用 git commit --amend 更改提交内容</p></li><li><p>使用 git revert 回滚某次的提交</p></li><li><p>使用 git stash 来暂存文件</p></li><li><p>配置 git alias 提升工作效率</p></li></ul><h2 id="使用-git-rebase-让提交记录更加清晰可读" tabindex="-1">使用 git rebase 让提交记录更加清晰可读 <a class="header-anchor" href="#使用-git-rebase-让提交记录更加清晰可读" aria-hidden="true">#</a></h2><h3 id="rebase-基本用法" tabindex="-1">rebase 基本用法 <a class="header-anchor" href="#rebase-基本用法" aria-hidden="true">#</a></h3><p>rebase 翻译为变基，它的作用和 merge 相似，用于把一个分支的修改合并到当前分支</p><p>如下图所示，经过 rebase 后提交历史的变化情况</p><p><img src="https://s2.loli.net/2022/07/01/9qOJUarzbjAsYyN.jpg" alt="rebase"></p><p>不明白单分支的好处，可以在看看知乎的这个问题：<a href="https://www.zhihu.com/question/61283395" target="_blank" rel="noreferrer">Git commits历史是如何做到如此清爽的？</a></p><p>Vue 的作者尤雨溪就是说：<a href="https://www.zhihu.com/question/61283395/answer/186122300" target="_blank" rel="noreferrer">多用 rebase</a></p><p>具体用法：</p><ul><li>基于 master 分支创建 feature 分支</li><li>在 feature 分支上开发功能点</li><li>master 上也提交了commit</li><li>在 feature 分支上执行 <code>git rebase master</code>，意为以 master 分支最后的提交作为基点，逐个应用 feature 的每个更改</li></ul><h3 id="git-rebase-vs-git-merge" tabindex="-1">git rebase VS git merge <a class="header-anchor" href="#git-rebase-vs-git-merge" aria-hidden="true">#</a></h3><p>合并分支有两种，即 rebase 、merge</p><p>merge 翻译为合并，即 <code>git merge branchname</code>，即合并分支代码，这种方法会保存每次 commit 的，当你使用 gitk 查看时就发现好几条颜色的线</p><p>另一种是 rebase，即去除一系列的提交记录，“复制”它们，然后在另一个地方逐个放下去</p><p>所以 rebase 的优势就明了了，它能创造更清晰的提交记录</p><p>但 merge 会保留你所有的 commit 的历史时间，当开发人员一多，历史记录就会变得混乱</p><h3 id="rebase-的交互模式" tabindex="-1">rebase 的交互模式 <a class="header-anchor" href="#rebase-的交互模式" aria-hidden="true">#</a></h3><p>在开发中，通常会在一个分支上产生很多无效的提交，这种情况下使用 rebase 的交互模式可以把多次 commit 压缩成一次提交，得到一个干净的提交历史</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 先看提交</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># f9f6f3b commit 3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 2feb45f commit 2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 07a3cb6 commit 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 我们要修改 2 的话，rebase 到它的下一个 commit，这里是 1</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">07a3cb6</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 然后在打开的对话框里面修改，之后还要一个 rebase continue</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">base-commi</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或者是 git rebase -i HEAD~2 对最近的两次 commit 进行合并	</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>也有人称之为后悔药功能，即你无论写什么 commit，最后都可以修改，无论提交什么，都可以合并，DIY性强</p></blockquote><h2 id="使用-git-reflog-git-reset-跳到任意-commit" tabindex="-1">使用 git reflog + git reset 跳到任意 commit <a class="header-anchor" href="#使用-git-reflog-git-reset-跳到任意-commit" aria-hidden="true">#</a></h2><p>换个说法叫时光机，即通过查找所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作），通过 reset HEAD 跳到指定 commit</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reflog</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#afa2f45 HEAD@{10}: checkout: moving from 今天 to 明天</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#4abcda5 HEAD@{11}: commit: 打通1800处仙窍</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#de42069 HEAD@{12}: commit: 真言轮经大成</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reset</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HEAD@{</span><span style="color:#F78C6C;">10</span><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或者 git reset --hard afa2f45</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如此一来，就回到了 afa2f45 commit 处，熟悉「时间法则」、「时光机」的人都知道，这是回到过去</p><h2 id="使用-git-cherry-pick-获取指定的-commit" tabindex="-1">使用 git cherry-pick 获取指定的 commit <a class="header-anchor" href="#使用-git-cherry-pick-获取指定的-commit" aria-hidden="true">#</a></h2><p>意为“挑拣”提交，和 merge 合并一个分支的所有提交不同，它会获取某个分支的单个提交，并作为一个新的提交接入到当前分支上</p><p>这个需要故事背景才容易理解</p><p>张三在分支上开发功能，每个功能点提交一次commit，共六个提交六个功能点（分别是 feature1~feature6），再回到第一个提交点，即他使用 <code>git reset --hard feature1</code> 跳转第一个 commit，在此基础上开发一个新功能，即 feature7，那么如果把 feature7 合并到 feature6 上怎么做？</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reflog</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># git reflog 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 找到 feature7 的 commit 4c97ff3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 回到 feature6 的 commit cd52afc</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reset</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--hard</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd52afc</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用 cherry-pick 拿到 feature7 的代码</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">4c97ff3</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>具体可看小蝌蚪的这篇 <a href="https://github.com/airuikun/front-core/issues/5" target="_blank" rel="noreferrer">小蝌蚪传记：git时光穿梭机--女神的侧颜</a> 来体会一二</p><p>简单来说，你的每一次 commit，就是一次记录，可以合并到任意地方。所以开发功能点或者修复bug之类，尽量做到一个功能点一个commit，方便出错时挑拣代码</p><h2 id="使用-git-commit-amend-更改提交内容" tabindex="-1">使用 git commit --amend 更改提交内容 <a class="header-anchor" href="#使用-git-commit-amend-更改提交内容" aria-hidden="true">#</a></h2><p>amend 的意思是修正</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 继续改动你的文件</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--amend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--no-edit</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 你这次的改动会被添加进最近一次的 commit 中</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>合并到上次的commit 中</p><p><code>git commit --amend</code>：弹出让你修改内容</p><p><code>git commit --amend --no-edit</code>：保持上一次的commit内容</p><blockquote><p>PS：假如你的代码已经 push 了的话，要慎用，因为会修改提交历史。</p></blockquote><h2 id="使用-git-revert-回滚某次的提交" tabindex="-1">使用 git revert 回滚某次的提交 <a class="header-anchor" href="#使用-git-revert-回滚某次的提交" aria-hidden="true">#</a></h2><p>上文提到一个回滚操作：<code>git reset --hard xxx</code>，能回到某次的 commit，除此之外，还有一种则是能撤销某次 commit</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 先找到你想撤销的那个 commit hash值</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">revert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">commit-i</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这种做法会新建一条commit 信息，来撤回之前的修改。</p><p>而 git reset 会直接提交记录退回到指定的 commit 上。</p><p>所以就个人开发或个人 feature 分支而言，可以使用 <code>git reset</code> 来回滚代码，但在多人协作的集成分支上，<code>git revert</code> 更适合。这样，提交的历史记录不会被抹去，可以安全地进行撤回</p><h2 id="使用-git-stash-来暂存文件" tabindex="-1">使用 git stash 来暂存文件 <a class="header-anchor" href="#使用-git-stash-来暂存文件" aria-hidden="true">#</a></h2><p>顾名思义，就是把本地的改动暂存起来</p><p>先了解下 git 的四大工作区域</p><h3 id="四大工作区域" tabindex="-1">四大工作区域 <a class="header-anchor" href="#四大工作区域" aria-hidden="true">#</a></h3><p><img src="https://s2.loli.net/2022/06/02/PFnpm6MtG8LEeNV.png" alt="Git工作区"></p><ul><li><p>Workspace（工作区）：本地电脑所见的文件和目录</p></li><li><p>Index/Stage（暂存区）：一般存放在 <code>.git</code> 目录下，当你 <code>git add 改动文件</code>，改动的文件就放入在「暂存区」</p></li><li><p>Respository（本地仓库）：当你 <code>git clone 地址</code>，就将远程仓库克隆到本地仓库。它是存在本地的版本库，其中HEAD指向最新放入仓库的版本。当你执行 <code>git commit</code>，文件改动就到本地仓库</p></li><li><p>Remote（远程仓库）：类似Github、Gitlab、码云等放在代码托管平台</p></li></ul><p>常见的场景是你还在开发一个功能点的时候，突然有个线上 bug 需要你紧急修复，这次你可以git commit 提交到本地仓库，后续通过 <code>git commit --amend </code> 继续在原 commit 上修改内容。但这里还有一种方法，即将代码存在暂存区，等 bug 修复完后，再从暂存区取出</p><p>基本命令如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 将本地的改动暂存</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">save</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 执行存储时，添加备注</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pop</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 应用最近一次暂存，并删除暂存记录</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apply</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#恢复最近的存储，但不会把存储从存储列表中删除，某人使用第一个存储，即 stash@{0}，如果要使用其他，git stash apply stash@{$num}</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 查看 stash 了哪些存储</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clear</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#删除所有缓存的 stash</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls-files</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--stage</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#查看 index 暂存区</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="配置-git-alias-提升工作效率" tabindex="-1">配置 git alias 提升工作效率 <a class="header-anchor" href="#配置-git-alias-提升工作效率" aria-hidden="true">#</a></h2><p>主要是为了简化命令，它的基本用法是 <code>git config --global alias.&lt;简化的字符&gt; 原始命令</code></p><p>如下面的例子：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">alias.co</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">alias.ci</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">alias.br</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然，另一种方法是在 .gitconfig 文件中设置</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight has-diff" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">alias</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">st</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">status</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-sb</span></span>
<span class="line"><span style="color:#FFCB6B;">co</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span></span>
<span class="line"><span style="color:#FFCB6B;">br</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span></span>
<span class="line"><span style="color:#FFCB6B;">mg</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span></span>
<span class="line"><span style="color:#FFCB6B;">ci</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span></span>
<span class="line"><span style="color:#FFCB6B;">ds</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">diff</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--staged</span></span>
<span class="line"><span style="color:#FFCB6B;">dt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">difftool</span></span>
<span class="line"><span style="color:#FFCB6B;">mt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mergetool</span></span>
<span class="line"><span style="color:#FFCB6B;">last</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HEAD</span></span>
<span class="line"><span style="color:#FFCB6B;">latest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for-each-ref</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--sort=-committerdate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--format=</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">%</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">committername</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">@%</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">refname:short</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">%(committerdate:short)</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> %</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">contents</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">\\&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--pretty=format:</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">%C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">yellow</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">%h</span><span style="color:#A6ACCD;"> %C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">blue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">%ad %C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">red</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">%d %C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">reset</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">%s %C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">green</span><span style="color:#89DDFF;">)[</span><span style="color:#A6ACCD;">%cn</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">\\&quot; </span><span style="color:#C3E88D;">--decorate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--date=short</span></span>
<span class="line"><span style="color:#FFCB6B;">hist</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--pretty=format:</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">%C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">yellow</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">%h</span><span style="color:#A6ACCD;"> %C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">red</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">%d %C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">reset</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">%s %C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">green</span><span style="color:#89DDFF;">)[</span><span style="color:#A6ACCD;">%an</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> %C</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">blue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">%ad\\&quot; </span><span style="color:#C3E88D;">--topo-order</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--graph</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--date=short</span></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cat-file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span></span>
<span class="line"><span style="color:#FFCB6B;">dump</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cat-file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span></span>
<span class="line"><span style="color:#FFCB6B;">lg</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--color</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--graph</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--pretty=format:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--abbrev-commit</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>参考<a href="https://juejin.cn/post/6974184935804534815#heading-6" target="_blank" rel="noreferrer">政采云的配置</a></p></blockquote><h2 id="除此之外" tabindex="-1">除此之外 <a class="header-anchor" href="#除此之外" aria-hidden="true">#</a></h2><p>还有一些不常见却好用的命令</p><ul><li><code>gitk</code>：打开git的图形化工具</li><li><code>gitjk</code>：撤消您刚刚在git中所做的操作</li><li><code>git help -g</code>：展示帮助信息</li><li><code>cat .git/HEAD</code>：查看分支文件</li><li><code>git fetch --all &amp;&amp; git reset --hard origin/master</code>：回到远程仓库的状态 <ul><li>抛弃本地所有的修改，回到远程仓库的状态</li></ul></li><li><code>git push -f origin master</code>：强行获取远程最新代码</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/airuikun/blog/issues/5" target="_blank" rel="noreferrer">git 时光穿梭机</a></li><li><a href="https://juejin.cn/post/6974184935804534815#heading-6" target="_blank" rel="noreferrer">我在工作中是如何使用 git 的</a></li><li><a href="https://mp.weixin.qq.com/s/DsdXGz8qb3B23Ra10ElKug" target="_blank" rel="noreferrer">程序员必会的六条黄金 Git 命令，让你效率提高百分之百</a></li><li><a href="https://ohshitgit.com/zh" target="_blank" rel="noreferrer">Oh Shit, Git!?!</a></li><li><a href="https://mp.weixin.qq.com/s/S3NuW5W3x1iDDtbfHziDzQ" target="_blank" rel="noreferrer">我是如何使用 git 的？</a></li></ul>`,67),o=[p];function t(r,c,i,C,y,D){return n(),a("div",null,o)}const A=s(e,[["render",t]]);export{d as __pageData,A as default};
