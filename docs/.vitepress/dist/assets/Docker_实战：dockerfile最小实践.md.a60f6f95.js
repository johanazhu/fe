import{_ as s,c as a,o as n,d as l}from"./app.590c1fbf.js";const D=JSON.parse('{"title":"实战：dockerfile 最小实践","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[]},{"level":2,"title":"第一步：先启动一个 koa 应用","slug":"第一步-先启动一个-koa-应用","link":"#第一步-先启动一个-koa-应用","children":[]},{"level":2,"title":"第二步：写个 Dockerfile 文件","slug":"第二步-写个-dockerfile-文件","link":"#第二步-写个-dockerfile-文件","children":[]},{"level":2,"title":"第三步：基于 dockerfile 生成镜像","slug":"第三步-基于-dockerfile-生成镜像","link":"#第三步-基于-dockerfile-生成镜像","children":[]},{"level":2,"title":"第四步：基于此镜像生成一容器","slug":"第四步-基于此镜像生成一容器","link":"#第四步-基于此镜像生成一容器","children":[]},{"level":2,"title":"第五步：导出此镜像","slug":"第五步-导出此镜像","link":"#第五步-导出此镜像","children":[]},{"level":2,"title":"第六步：在服务器上跑通","slug":"第六步-在服务器上跑通","link":"#第六步-在服务器上跑通","children":[]},{"level":2,"title":"另一种方法第五步：上传镜像","slug":"另一种方法第五步-上传镜像","link":"#另一种方法第五步-上传镜像","children":[]},{"level":2,"title":"另一种方法第六步：拉取镜像","slug":"另一种方法第六步-拉取镜像","link":"#另一种方法第六步-拉取镜像","children":[]},{"level":2,"title":"后续","slug":"后续","link":"#后续","children":[]}],"relativePath":"Docker/实战：dockerfile最小实践.md"}'),e={name:"Docker/实战：dockerfile最小实践.md"},p=l(`<h1 id="实战-dockerfile-最小实践" tabindex="-1">实战：dockerfile 最小实践 <a class="header-anchor" href="#实战-dockerfile-最小实践" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>最小实践，意味着将链路打通，站在更高的层面看问题，问题就变得清晰，此文笔者将带诸位实现一个最简单的 koa 服务，并将其部署至服务器上。</p><p>先决知识：对<a href="./docker基本介绍.html">docker 有一定的了解</a></p><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-hidden="true">#</a></h2><p>第一步：先启动一个 koa 应用，</p><p>第二步：再生成一个 dockerfile ，并编写它</p><p>第三步：基于 dockerfile 生成镜像（docker build）</p><p>第四步：基于此镜像生成（run）一个容器，检查在本机上是否跑的通</p><p>第五步：如果通，就导出此镜像</p><p>第六步：xbash 连接服务器上（假设服务器上已安装 docker），导入此镜像，通过此镜像生成一容器</p><p>这就是最小实现</p><p>这里还有一种实现方式：</p><p>在第五步时，把它发布到远端仓库，第六步，从远端拉取到镜像，但缺点是，你的镜像要公开（只有一个私有名额）</p><h2 id="第一步-先启动一个-koa-应用" tabindex="-1">第一步：先启动一个 koa 应用 <a class="header-anchor" href="#第一步-先启动一个-koa-应用" aria-hidden="true">#</a></h2><p>新建一个 dockerfile_koa_demo 文件，npm init -y 生成 package.json。下载 koa 包，新建 app.js</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dockerfile_koa_demo</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dockerfile_koa_demo</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save</span></span>
<span class="line"><span style="color:#FFCB6B;">touch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>再编写 app.js</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Koa </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">koa</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Koa</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello, docker</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3010</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3010端口已启动</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>修改 package.json 的 script</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nodemon app.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>启动脚本</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>看到如下图所示：</p><p><img src="https://s2.loli.net/2022/04/24/TuNCImfzXSarUtK.png" alt="dockerfile_脚本"></p><p>浏览器访问正常</p><h2 id="第二步-写个-dockerfile-文件" tabindex="-1">第二步：写个 Dockerfile 文件 <a class="header-anchor" href="#第二步-写个-dockerfile-文件" aria-hidden="true">#</a></h2><p>新建一个 Dockerfile 文件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">touch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dockerfile</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>编写 Dockerfile</p><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"># base image</span></span>
<span class="line"><span style="color:#A6ACCD;"># FROM</span></span>
<span class="line"><span style="color:#A6ACCD;">FROM node</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 复制文件到容器</span></span>
<span class="line"><span style="color:#A6ACCD;">ADD . /home/www</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 进入工作目录</span></span>
<span class="line"><span style="color:#A6ACCD;">WORKDIR /home/www</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 安装项目依赖包</span></span>
<span class="line"><span style="color:#A6ACCD;">RUN npm install --registry=https://registry.npm.taobao.org</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 暴露 端口</span></span>
<span class="line"><span style="color:#A6ACCD;">EXPOSE 3010</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 开始命令</span></span>
<span class="line"><span style="color:#A6ACCD;">CMD [&quot;node&quot;, &quot;./app.js&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>第二步写完了</p><h2 id="第三步-基于-dockerfile-生成镜像" tabindex="-1">第三步：基于 dockerfile 生成镜像 <a class="header-anchor" href="#第三步-基于-dockerfile-生成镜像" aria-hidden="true">#</a></h2><p>为了加快构建速度，我们先生成 <code>.dockerignore</code> ，并往里写上 <code>node_modules</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">touch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.dockerignore</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 <code>.dockerignore</code> 里写入 <code>node_modules</code> ，意思是说当你 <code>docker build</code> 的时候忽略 <code>node_modules</code> 文件，加快构建速度</p><p>通过命令行生成镜像，命名 johan/koa_server:v1.0.0</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johan/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># -t 就是给镜像起名</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>效果如下图所示：</p><p><img src="https://s2.loli.net/2022/04/24/vl3Lykm9aEGMJOw.png" alt="docker_build"></p><p>查看镜像是否有了</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">images</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="第四步-基于此镜像生成一容器" tabindex="-1">第四步：基于此镜像生成一容器 <a class="header-anchor" href="#第四步-基于此镜像生成一容器" aria-hidden="true">#</a></h2><p>命令行生成一容器</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa_server_container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3010</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3010</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johan/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># -d 后台运行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># --name 给容器起名字</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># -p 本机端口隐射镜像中的端口</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>查看镜像是否生成</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在浏览器中输入<code>http://localhost:3010/</code> ,bingo</p><h2 id="第五步-导出此镜像" tabindex="-1">第五步：导出此镜像 <a class="header-anchor" href="#第五步-导出此镜像" aria-hidden="true">#</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">save</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johan/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa_server.tar</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2022/04/24/Yu9O8RoQPsNTliw.png" alt="导出镜像"></p><h2 id="第六步-在服务器上跑通" tabindex="-1">第六步：在服务器上跑通 <a class="header-anchor" href="#第六步-在服务器上跑通" aria-hidden="true">#</a></h2><p>这里我们假设服务器上已经安装了 docker 以及 lrzsz 包（本文具体不展开）</p><p>通过 xbash 连接服务器，通过命令 rz 上传 tar 包</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">rz</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2022/04/24/QIeUMBkXolxvjhE.png" alt="lrzsz上传镜像"></p><p>解开此压缩包（导入）</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">load</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa_server.tar</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2022/04/24/K3zMUmT7Y86kWSQ.png" alt="导入镜像"></p><p>基于此容器生成容器</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa_server_container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3010</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3010</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johan/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>并查看跑通的容器</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在浏览器中输入域名，bingo</p><p>以上就是一个 <code>dockerfile</code> 的最小实现，是不是很简单。当然，你可以在第五步时将镜像上传至<code>docker hub</code>，第六步从 <code>dockerfile</code> 拉取镜像，再生成容器。如下</p><h2 id="另一种方法第五步-上传镜像" tabindex="-1">另一种方法第五步：上传镜像 <a class="header-anchor" href="#另一种方法第五步-上传镜像" aria-hidden="true">#</a></h2><p>命令行登录 dockerhub（首先要先注册）</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">login</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>给镜像命名</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johan/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johanbo/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将镜像上传至 docker hub</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johanbo/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2022/04/24/Rnrp2lqJfH5xYCF.png" alt="docker_push"></p><h2 id="另一种方法第六步-拉取镜像" tabindex="-1">另一种方法第六步：拉取镜像 <a class="header-anchor" href="#另一种方法第六步-拉取镜像" aria-hidden="true">#</a></h2><p>登录服务器，并拉取镜像</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johanbo/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2022/04/24/HuOKXxSF1l3hMqs.png" alt="docker_pull"></p><blockquote><p><strong>注意</strong>：这里需要打标签，否则会默认拉取 latest</p></blockquote><p>启动容器</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa_server_container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3010</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3010</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">johan/koa_server:v1.</span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在浏览器中输入域名，bingo</p><blockquote><p>注意：服务器开发端口需要去云服务商那里开发相应端口（安全组配置规则）</p></blockquote><h2 id="后续" tabindex="-1">后续 <a class="header-anchor" href="#后续" aria-hidden="true">#</a></h2><p>你可以在 <code>dockerfile</code> 里配置你所需的环境变量，镜像生成的容器是个 &quot;mini 服务器&quot;，怎么倒腾都行，和整个服务器没有关系，所以你的应用不受环境影响。</p><p>在这里说一个痛点：即使你解决了环境问题，但是 CICD 也是个问题，如何更快捷地集成呢？接下来的一节我会介绍下，docker 与 jenkins 的结合，通过 docker 生成 jenkins，jenkins 赋能 CICD</p>`,85),o=[p];function r(c,t,i,d,C,y){return n(),a("div",null,o)}const u=s(e,[["render",r]]);export{D as __pageData,u as default};
