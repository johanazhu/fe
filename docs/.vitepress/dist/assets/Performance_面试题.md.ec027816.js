import{_ as e,c as a,o as p,d as r}from"./app.590c1fbf.js";const k=JSON.parse('{"title":"性能优化面试题","description":"","frontmatter":{},"headers":[{"level":3,"title":"preload（预加载） 和 prefetch 的区别","slug":"preload-预加载-和-prefetch-的区别","link":"#preload-预加载-和-prefetch-的区别","children":[]},{"level":2,"title":"本文看点","slug":"本文看点","link":"#本文看点","children":[]},{"level":2,"title":"页面监控的指标有哪些","slug":"页面监控的指标有哪些","link":"#页面监控的指标有哪些","children":[{"level":3,"title":"有哪些软件可以监控到","slug":"有哪些软件可以监控到","link":"#有哪些软件可以监控到","children":[]}]},{"level":2,"title":"如何提速","slug":"如何提速","link":"#如何提速","children":[{"level":3,"title":"前端工程化角度思考（以 webpack 为例）","slug":"前端工程化角度思考-以-webpack-为例","link":"#前端工程化角度思考-以-webpack-为例","children":[]},{"level":3,"title":"框架角度","slug":"框架角度","link":"#框架角度","children":[]},{"level":3,"title":"HTTP 方面","slug":"http-方面","link":"#http-方面","children":[]},{"level":3,"title":"页面构建方面","slug":"页面构建方面","link":"#页面构建方面","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"Performance/面试题.md"}'),t={name:"Performance/面试题.md"},h=r('<h1 id="性能优化面试题" tabindex="-1">性能优化面试题 <a class="header-anchor" href="#性能优化面试题" aria-hidden="true">#</a></h1><h3 id="preload-预加载-和-prefetch-的区别" tabindex="-1">preload（预加载） 和 prefetch 的区别 <a class="header-anchor" href="#preload-预加载-和-prefetch-的区别" aria-hidden="true">#</a></h3><p>preload 是页面加载前加载，</p><p>prefetch 异最低优先级 lowest 来提前加载</p><p>preload 加载资源一般是当前页面需要，它告诉浏览器预先请求当前页面需要的资源</p><p>prefetch 一般是其他页面需要用到的资源</p><p>defer 或者 async</p><p>使用 Preload/Prefetch 优化你的应用</p><p>如何做页面的性能优化</p><p>1.减少体积（打包优化、babel 优化）</p><p>webpack 打包，使用 webpack content-hash</p><p>文件指纹是打包后输出的文件名的后缀</p><ul><li><p><code>Hash</code> ：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</p></li><li><p><code>Chunkhash</code>：和 webpack 打包的 chunk 有关，不同的入口会有不同的 chunkhash</p></li><li><p><code>Contenthash</code>：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</p><p>2.延迟加载（资源的异步加载）</p></li></ul><p>react 懒加载</p><p>3.网络加速（cdn、dns 预解析、http 并发数）</p><p>4.首屏渲染 （ssr、骨架图）</p><p>5.利用缓存（http 缓存）</p><h2 id="本文看点" tabindex="-1">本文看点 <a class="header-anchor" href="#本文看点" aria-hidden="true">#</a></h2><p>如何监控页面加载速度，指标是什么</p><p>如何对应用提速，性能优化的点有哪些</p><h2 id="页面监控的指标有哪些" tabindex="-1">页面监控的指标有哪些 <a class="header-anchor" href="#页面监控的指标有哪些" aria-hidden="true">#</a></h2><p>FCP（First Contentful Paint)：白屏时间（第一个文本绘制时间）</p><p>Speed Index：首屏时间</p><p>TTI（Time To Interactive）：第一次可交互的时间</p><p>lighthouse score（performance）：Chrome 浏览器审查工具性能评分</p><p>FCP（白屏时间）：是指从用户进入网站（输入 url、刷新、跳转等方法）的时刻开始计算，一直到页面有内容展示出来的时间节点</p><p>这个过程包括 dns 查询、建立 tcp 连接、发送首个 HTTP 请求、返回 html 文档、html 文档 head 解析完毕</p><h3 id="有哪些软件可以监控到" tabindex="-1">有哪些软件可以监控到 <a class="header-anchor" href="#有哪些软件可以监控到" aria-hidden="true">#</a></h3><p>百度、google...</p><h2 id="如何提速" tabindex="-1">如何提速 <a class="header-anchor" href="#如何提速" aria-hidden="true">#</a></h2><p>说白了是如何做性能优化，这里不说废话，从四个角度切入</p><h3 id="前端工程化角度思考-以-webpack-为例" tabindex="-1">前端工程化角度思考（以 webpack 为例） <a class="header-anchor" href="#前端工程化角度思考-以-webpack-为例" aria-hidden="true">#</a></h3><p>​ webpack 方面的</p><p>构建时压缩图片、使用 webp 图片、优化 SVG 图标</p><h3 id="框架角度" tabindex="-1">框架角度 <a class="header-anchor" href="#框架角度" aria-hidden="true">#</a></h3><p>Vue 我不熟，仅 React 而言，可以从这几个方面来做功夫</p><p>如果是类组件的话，使用 pureComponent、shouldComponentUpdate</p><p>如果是函数式组件的话，可以使用 useMemo、useCallback、memo</p><p>​ useMemo 和 useCallback 的区别</p><p>​ memo 应该和 useMemo 结合</p><p>优化 UI 代码体积</p><p>使用 React.lazy 做代码分割</p><p>如果遇到列表，使用 key 做关键字，并可使用虚拟列表</p><p>​ 关于虚拟列表的解决方案，我在这篇文章都写了</p><blockquote><p>具体为懒加载、IntersectionObserver、getBoundingClientRect</p></blockquote><h3 id="http-方面" tabindex="-1">HTTP 方面 <a class="header-anchor" href="#http-方面" aria-hidden="true">#</a></h3><p>使用 HTTP 缓存</p><p>升级为 HTTP2</p><p>服务器使用 gzip 压缩</p><p>OSS+CDN 加速</p><h3 id="页面构建方面" tabindex="-1">页面构建方面 <a class="header-anchor" href="#页面构建方面" aria-hidden="true">#</a></h3><p>CSS 放顶部、JS 放底部</p><p>减少回流和重绘</p><p>​ 回流和重绘</p><p>script defer、async</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ul><li><a href="https://mp.weixin.qq.com/s/CE4uUUEufCUvXx5HZJxJBw" target="_blank" rel="noreferrer">从龟速 11s 到闪电 1s，详解前端性能优化之首屏加载</a></li></ul>',57),l=[h];function i(n,d,c,s,o,u){return p(),a("div",null,l)}const _=e(t,[["render",i]]);export{k as __pageData,_ as default};
