import{_ as e,c as a,o as s,d as n}from"./app.590c1fbf.js";const f=JSON.parse('{"title":"Node 基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node 是什么","slug":"node-是什么","link":"#node-是什么","children":[]},{"level":2,"title":"Node.js 特点","slug":"node-js-特点","link":"#node-js-特点","children":[]},{"level":2,"title":"Node 全局对象","slug":"node-全局对象","link":"#node-全局对象","children":[{"level":3,"title":"JavaScript 全局对象的分类","slug":"javascript-全局对象的分类","link":"#javascript-全局对象的分类","children":[]},{"level":3,"title":"Node 专属全局对象解析","slug":"node-专属全局对象解析","link":"#node-专属全局对象解析","children":[]},{"level":3,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}]}],"relativePath":"Node/Node基础.md"}'),o={name:"Node/Node基础.md"},l=n(`<h1 id="node-基础" tabindex="-1">Node 基础 <a class="header-anchor" href="#node-基础" aria-hidden="true">#</a></h1><h2 id="node-是什么" tabindex="-1">Node 是什么 <a class="header-anchor" href="#node-是什么" aria-hidden="true">#</a></h2><p>Node 是 JavaScript 的一种运行环境，是一个基于 Chrome V8 引擎建立的一个平台。由于采用了事件驱动、非阻塞 I/O 的模型，Node 能够成为了构建轻量且高效的 Web 应用的理想选择</p><h2 id="node-js-特点" tabindex="-1">Node.js 特点 <a class="header-anchor" href="#node-js-特点" aria-hidden="true">#</a></h2><p>非阻塞 I/O</p><p>单线程</p><p>事件驱动</p><p>npm 包管理</p><p>无缓冲</p><p>可扩展</p><h2 id="node-全局对象" tabindex="-1">Node 全局对象 <a class="header-anchor" href="#node-全局对象" aria-hidden="true">#</a></h2><p>在浏览器中，我们有 <code>document</code> 和 <code>window</code> 等全局对象；而 Node 只包含 ECMAScript 和 V8，不包含 BOM 和 DOM，因此 Node 中不存在 <code>document</code> 和 <code>window</code>；取而代之，Node 专属的全局对象是 <code>process</code></p><h3 id="javascript-全局对象的分类" tabindex="-1">JavaScript 全局对象的分类 <a class="header-anchor" href="#javascript-全局对象的分类" aria-hidden="true">#</a></h3><p>在此之前，我们先看一下 JavaScript 各个运行环境的全局对象的比较，如下图所示：</p><p><img src="https://i.loli.net/2021/08/22/HfksCreUZlO37Kx.png" alt="各个运行环境的全局对象"></p><p>可以看到 JavaScript 全局对象可以分为四类：</p><ol><li>浏览器专属，例如 <code>window</code>、<code>alert</code> 等等；</li><li>Node 专属，例如 <code>process</code>、<code>__dirname</code> 、<code>__filename</code> 等等</li><li>浏览器和 Node 共有，但是实现方式不同，例如 <code>console</code> 、<code>setTimeout</code> 、<code>setInterval</code></li><li>浏览器和 Node 共有，并且属于 ECMAScript 语言定义的一部分，例如 <code>Date</code>、<code>String</code>、<code>promise</code> 等</li></ol><h3 id="node-专属全局对象解析" tabindex="-1">Node 专属全局对象解析 <a class="header-anchor" href="#node-专属全局对象解析" aria-hidden="true">#</a></h3><h4 id="process-进程" tabindex="-1">process 进程 <a class="header-anchor" href="#process-进程" aria-hidden="true">#</a></h4><p>process 全局对象可以说是 Node.js 的灵魂，它是管理当前 Node.js 进程状态的对象，提供了与操作系统的简单接口。</p><h5 id="有哪些属性" tabindex="-1">有哪些属性 <a class="header-anchor" href="#有哪些属性" aria-hidden="true">#</a></h5><ul><li><code>pid</code>：进程编号</li><li><code>env</code>：系统环境变量</li><li><code>argv</code>：命令行执行此脚本时的输入参数</li><li><code>platform</code>：当前操作系统的平台</li></ul><blockquote><p>提示</p><p>可以在 Node REPL 中尝试一下这些对象。像上面说的那样进入 REPL（你的输出很有可能跟我的不一样）：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span></span>
<span class="line"><span style="color:#FFCB6B;">Welcome</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Node.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v12.10.0.</span></span>
<span class="line"><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.help</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">more</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">information.</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> process.pid</span></span>
<span class="line"><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> process.platform</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">darwin</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></blockquote><h4 id="buffer" tabindex="-1">Buffer <a class="header-anchor" href="#buffer" aria-hidden="true">#</a></h4><p><code>Buffer</code> 全局对象让 JavaScript 也能够轻松地处理二进数据流，结合 Node 的流接口（Stream），能够实现高效的二进制文件处理</p><h4 id="filename-和-dirname" tabindex="-1"><code>__filename</code> 和 <code>__dirname</code> <a class="header-anchor" href="#filename-和-dirname" aria-hidden="true">#</a></h4><p>分别代表当前所运行 Node 脚本的文件路径和所在目录路径</p><h4 id="module-模块" tabindex="-1">module 模块 <a class="header-anchor" href="#module-模块" aria-hidden="true">#</a></h4><p>Node 实现了一个简单模块记在系统。在 Node 中，文件和模块是一一对应的关系，可以理解为一个文件就是一个模块。其模块系统的实现主要依赖于全局对象 module，其中实现了 exports（导出）、require（加载）机制</p><p>简单来说，commonJS 导出的是值的拷贝，而非值的引用，这与 <a href="./../ES6/模块化历程.html">ES6 中的模块化</a>是不一样的</p><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h3><ul><li><p><a href="https://tuture.co/2019/12/03/892fa12/" target="_blank" rel="noreferrer">一杯茶的时间，上手 Node.js</a></p></li><li><p><a href="https://github.com/tuture-dev/nodejs-roadmap" target="_blank" rel="noreferrer">Node.js 后端工程师学习路径</a></p></li><li><p><a href="https://juejin.cn/post/6844904029219192839" target="_blank" rel="noreferrer">「万字整理 」这里有一份 Node.js 入门指南和实践,请注意查收</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/wezc-VpKOXilEnsHvSuU9g" target="_blank" rel="noreferrer">一篇文章构建你的 NodeJS 知识体系</a></p></li></ul>`,32),r=[l];function d(p,c,i,t,h,u){return s(),a("div",null,r)}const b=e(o,[["render",d]]);export{f as __pageData,b as default};
