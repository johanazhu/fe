import{_ as i,c as l,o as e,d as a}from"./app.590c1fbf.js";const v=JSON.parse('{"title":"JavaScript 框架设计读书笔记","description":"","frontmatter":{},"headers":[{"level":2,"title":"摘要","slug":"摘要","link":"#摘要","children":[]},{"level":2,"title":"重点知识","slug":"重点知识","link":"#重点知识","children":[]},{"level":2,"title":"读书笔记","slug":"读书笔记","link":"#读书笔记","children":[]}],"relativePath":"Read/book/JavaScript框架设计.md"}'),t={name:"Read/book/JavaScript框架设计.md"},r=a('<h1 id="javascript-框架设计读书笔记" tabindex="-1">JavaScript 框架设计读书笔记 <a class="header-anchor" href="#javascript-框架设计读书笔记" aria-hidden="true">#</a></h1><h2 id="摘要" tabindex="-1">摘要 <a class="header-anchor" href="#摘要" aria-hidden="true">#</a></h2><h2 id="重点知识" tabindex="-1">重点知识 <a class="header-anchor" href="#重点知识" aria-hidden="true">#</a></h2><p>种子模块</p><ul><li>命名空间</li><li>对象扩展</li><li>数组化</li><li>类型判断</li><li>domReady</li><li>无冲突处理</li></ul><p>模块加载系统</p><ul><li>AMD规范</li><li>加载器所在路径的探知</li><li>require 方法</li><li>define 方法</li></ul><p>语言模块</p><ul><li>String 的扩展与修复</li><li>Array 的扩展与修复</li><li>Number 的扩展与修复</li><li>Function 的扩展与修复</li><li>Date 的扩展与修复</li></ul><p>浏览器嗅探与特征侦测</p><ul><li><p>判定浏览器</p></li><li><p>事件的支持侦测</p></li><li><p>样式的支持侦测</p></li><li><p>jQuery的一些常用特征的含义</p></li></ul><p>类工厂</p><ul><li>JavaScript 对类的支持</li><li>各种类工厂的实现 <ul><li>相当精巧的库——P.js</li><li>JS.Class</li><li>simple-inheritance</li><li>体现 JavaScript 灵活性的库——def.js</li></ul></li><li>ES5 属性描述符对 OO 库的冲击</li></ul><p>选择器引擎</p><ul><li>浏览器内置的寻找元素的方法</li><li>getElementsBySelector</li><li>选择器引擎涉及的知识点</li><li>选择器引擎设计的通用函数 <ul><li>isXML</li><li>contains</li><li>节点排序与去重</li><li>切割器</li><li>属性选择器对于空白字符的匹配策略</li><li>子元素过滤伪类的分解与匹配</li></ul></li><li>Sizzle 引擎</li></ul><p>节点模块</p><ul><li>节点的创建</li><li>节点的插入</li><li>节点的复制</li><li>节点的移除</li><li>innerHTML、innerText 与 outerHTML 的处理</li><li>一些奇葩的元素节点 <ul><li>iframe 元素</li><li>object 元素</li><li>video 元素</li></ul></li></ul><p>数据缓存系统</p><ul><li>jQuery 的第一代缓存系统</li><li>jQuery 的第二代缓存系统</li><li>mass Framework 的第一代数据缓存系统</li><li>mass Framework 的第二代数据缓存系统</li><li>mass Framework 的第三代数据缓存系统</li></ul><p>样式模块</p><ul><li>主题结构</li><li>样式名的修正</li><li>个别样式的特殊处理 <ul><li>opacity</li><li>user-select</li><li>background-position</li><li>...</li></ul></li><li>元素的滚动条的坐标</li></ul><p>属性模块</p><ul><li>如何区分固有属性与自定义属性</li><li>如何判定浏览器是否区别固定属性与自定义属性</li><li>className 的操作</li><li>Prototype.js 的属性系统</li><li>jQuery 的属性系统</li><li>mass Framework 的属性系统</li><li>value的操作</li></ul><p>事件系统</p><ul><li>onXXX 绑定方法的缺陷</li><li>attachEvent 的缺陷</li><li>addEventListener 的缺陷</li><li>jQuery 1.8.2的事件模块概述</li><li>jQuery.event.add 的源码解读</li><li>jQuery.event.remove 的源码解读</li><li>jQuery.event.dispatch 的源码解读</li><li>jQuery.event.trigger 的源码解读</li><li>...</li></ul><p>异步处理</p><ul><li>setTimeout 与 setInterval</li><li>jQuert Deferred</li></ul><p>数据交互模块</p><ul><li>Ajax 概述</li><li>优雅获取 XMLHttpRequest 对象</li><li>XMLHttpRequest 对象的事件绑定与状态维护</li><li>发送请求与数据</li><li>接收数据</li><li>上传文件</li><li>一个完整的 Ajax实现</li></ul><p>动画引擎</p><ul><li>动画的原理</li><li>缓动公式</li><li>API的设计</li><li>requestAnimationFrame</li><li>CSS3 transition</li><li>CSS3 animation</li></ul><p>插件化</p><ul><li>jQuery的插件的一般写法</li></ul><p>MVVM</p><h2 id="读书笔记" tabindex="-1">读书笔记 <a class="header-anchor" href="#读书笔记" aria-hidden="true">#</a></h2><ul><li>一般创造性的活动，一开始都是临摹他人的作品。就算不“造轮子”，也要收集一大堆“轮子”，作家有他的素材集，设计师有大量icon与笔刷，普通的“码农”也有个commonjs存放着一些常用的函数</li><li>库是解决某个问题而拼凑出来的一大堆函数与类的集合，框架则是一个半成品的应用，直接给出一个骨架</li><li>JavaScript框架分类，目前JavaScript框架可以划分为5类 <ul><li>第1种出现的是以命名空间为导向的类库或框架</li><li>第2种出现的是以类工厂为导向的框架，如著名的Prototype，除了最基本的命名空间，其他模块都是一个由类工厂衍生出来的类对象</li><li>第3种就是以jQuery为代表的以选择器为导向的框架，整个框架或库主体是一个特殊类数组对象，方便集化操作</li><li>第4种就是以加载器串联起来的框架，它们都有复数个JavaScript文件，每个JavaScript文件都以固定规则编写。其中最著名的莫过于AMD</li><li>第 5 种就是具有明确分层构架的 MV*框架。首先是 JavaScript MVC（现在叫 CanJS）、backbonejs和spinejs，然后更符合前端实际的MVVM框架，如knockout、ember、angular、avalon、winjs。在MVVM框架中，原有DOM操作被声明式绑定取代了</li></ul></li><li>JQuery包含了几样了不起的东西：“无new实例化”技术，$(expr)就是返回一个实例，不需要显式地new出来；get first set all 访问规则；数据缓存系统。这样就可以复制节点的事件了。此外，IIFE （Immediately-Invoked Function Expression）也被发掘出来。</li><li>《Unix 编程艺术》列举的众多“金科玉律”的第一条就是模块，里面有言——“要编写复杂软件又不至于一败涂地的唯一方法，就是用定义清晰的接口把若干简单模块组合起来，如此一来，多数问题只会出现在局部，那么还有希望对局部进行改进或优化，而不至于牵动全身”</li><li>Prototype.js等侵入式框架则在原型上添加camelize等方法。</li><li>类型的判定必不可少，常见形式是isXXX系列。</li><li>数据的缓存与处理，目前浏览器也提供data-*属性进行这面的工作，但不太好用，需要框架的进一步封装。</li><li>种子模块就是其中的急先锋，它里面的方法不一定要求个个神通广大，设计优良，但一定极具扩展性，常用，稳定。</li><li>参照许多框架与库的实现，我认为种子模块应该包含如下功能：对象扩展，数组化，类型判定，简单的事件绑定与卸载，无冲突处理，模块加载与domReady</li><li>IIFE是现代JavaScript框架最主要的基础设施，它像细胞膜一样包裹自身，防止变量污染。</li><li>不过对于某些框架，它们是没有统一的命名空间，如Prototype.js , mootools。它们就是不想让你感觉到框架的存在，它的意义深透到 JavaScript、DOM、COM 等整个执行环境的每个角落，对原生对象的原型进行扩展。</li></ul>',36),n=[r];function u(p,s,o,c,d,h){return e(),l("div",null,n)}const _=i(t,[["render",u]]);export{v as __pageData,_ as default};
